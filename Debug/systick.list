
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b5c  08003b5c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b64  08003b64  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000006c  08003bd8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08003bd8  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f13  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7b  00000000  00000000  00028ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ca  00000000  00000000  0002b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165df  00000000  00000000  0002b7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e98  00000000  00000000  00041dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000877b0  00000000  00000000  0004bc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000257c  00000000  00000000  000d340c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d5988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003adc 	.word	0x08003adc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003adc 	.word	0x08003adc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <SystickCallback>:
// 채터링 제거
bool curSwitch;
// 이종 시간
int countA;
int countB;
void SystickCallback(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	if(countA > 0) countA--;
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <SystickCallback+0x78>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	dd04      	ble.n	8000592 <SystickCallback+0x16>
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <SystickCallback+0x78>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <SystickCallback+0x78>)
 8000590:	6013      	str	r3, [r2, #0]
	if(countB > 0) countB--;
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <SystickCallback+0x7c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	dd04      	ble.n	80005a4 <SystickCallback+0x28>
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <SystickCallback+0x7c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <SystickCallback+0x7c>)
 80005a2:	6013      	str	r3, [r2, #0]
	static uint32_t bufSwitch = 0x55555555;
	// update state of switch
	bufSwitch = bufSwitch << 1;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <SystickCallback+0x80>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <SystickCallback+0x80>)
 80005ac:	6013      	str	r3, [r2, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)
 80005ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b2:	4813      	ldr	r0, [pc, #76]	; (8000600 <SystickCallback+0x84>)
 80005b4:	f000 fe8e 	bl	80012d4 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d104      	bne.n	80005c8 <SystickCallback+0x4c>
		bufSwitch += 0;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <SystickCallback+0x80>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <SystickCallback+0x80>)
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e004      	b.n	80005d2 <SystickCallback+0x56>
	else
		bufSwitch += 1;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <SystickCallback+0x80>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <SystickCallback+0x80>)
 80005d0:	6013      	str	r3, [r2, #0]
	// 스위치 판단
	if(bufSwitch == 0xffffffff) curSwitch = 1;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <SystickCallback+0x80>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005da:	d102      	bne.n	80005e2 <SystickCallback+0x66>
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <SystickCallback+0x88>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	if(bufSwitch == 0x00000000) curSwitch = 0;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SystickCallback+0x80>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <SystickCallback+0x74>
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <SystickCallback+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000d4 	.word	0x200000d4
 80005f8:	200000d8 	.word	0x200000d8
 80005fc:	20000000 	.word	0x20000000
 8000600:	40020000 	.word	0x40020000
 8000604:	200000d0 	.word	0x200000d0

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fac7 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f853 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8d9 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f8ad 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 800061e:	4820      	ldr	r0, [pc, #128]	; (80006a0 <main+0x98>)
 8000620:	f000 fa6e 	bl	8000b00 <initUart>
  uint8_t count;
  bool oldSwitch = curSwitch;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0x9c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(curSwitch != oldSwitch){
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <main+0x9c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	429a      	cmp	r2, r3
 8000632:	d01e      	beq.n	8000672 <main+0x6a>
  		//down
  		if(curSwitch == 0){
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <main+0x9c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f083 0301 	eor.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d014      	beq.n	800066c <main+0x64>
  			count++;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	3301      	adds	r3, #1
 8000646:	71fb      	strb	r3, [r7, #7]
  			printf("count = %d\n", count);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4619      	mov	r1, r3
 800064c:	4816      	ldr	r0, [pc, #88]	; (80006a8 <main+0xa0>)
 800064e:	f002 fb75 	bl	8002d3c <iprintf>
  			if(count == 40) countB = -1;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b28      	cmp	r3, #40	; 0x28
 8000656:	d103      	bne.n	8000660 <main+0x58>
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0xa4>)
 800065a:	f04f 32ff 	mov.w	r2, #4294967295
 800065e:	601a      	str	r2, [r3, #0]
  			if(count == 50) countB = 0;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b32      	cmp	r3, #50	; 0x32
 8000664:	d102      	bne.n	800066c <main+0x64>
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <main+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
  		//up
  		if(curSwitch == 1){

  		}
  		//update state
  		oldSwitch = curSwitch;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0x9c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	71bb      	strb	r3, [r7, #6]
  	}
  	if(countA == 0){
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <main+0xa8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d106      	bne.n	8000688 <main+0x80>
  		countA = 523;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <main+0xa8>)
 800067c:	f240 220b 	movw	r2, #523	; 0x20b
 8000680:	601a      	str	r2, [r3, #0]
  		printf("count A\n");
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0xac>)
 8000684:	f002 fbc0 	bl	8002e08 <puts>
  	}
  	if(countB == 0){
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <main+0xa4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1cc      	bne.n	800062a <main+0x22>
  		countB = 762;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <main+0xa4>)
 8000692:	f240 22fa 	movw	r2, #762	; 0x2fa
 8000696:	601a      	str	r2, [r3, #0]
  		printf("count B\n");
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <main+0xb0>)
 800069a:	f002 fbb5 	bl	8002e08 <puts>
  	if(curSwitch != oldSwitch){
 800069e:	e7c4      	b.n	800062a <main+0x22>
 80006a0:	20000088 	.word	0x20000088
 80006a4:	200000d0 	.word	0x200000d0
 80006a8:	08003af4 	.word	0x08003af4
 80006ac:	200000d8 	.word	0x200000d8
 80006b0:	200000d4 	.word	0x200000d4
 80006b4:	08003b00 	.word	0x08003b00
 80006b8:	08003b08 	.word	0x08003b08

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fc7c 	bl	8002fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xb4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xb4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xb4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <SystemClock_Config+0xb8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <SystemClock_Config+0xb8>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <SystemClock_Config+0xb8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fde9 	bl	8001304 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000738:	f000 f894 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f84c 	bl	80017f4 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000762:	f000 f87f 	bl	8000864 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 fa00 	bl	8001bb4 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f853 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000088 	.word	0x20000088
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0x90>)
 8000830:	f000 fbcc 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_GPIO_Init+0x94>)
 800084a:	f000 fbbf 	bl	8000fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40020800 	.word	0x40020800
 8000860:	40020000 	.word	0x40020000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <HAL_UART_MspInit+0x94>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d133      	bne.n	800094a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_UART_MspInit+0x98>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <HAL_UART_MspInit+0x98>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <HAL_UART_MspInit+0x98>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_UART_MspInit+0x98>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <HAL_UART_MspInit+0x98>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_UART_MspInit+0x98>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091a:	230c      	movs	r3, #12
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092a:	2307      	movs	r3, #7
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <HAL_UART_MspInit+0x9c>)
 8000936:	f000 fb49 	bl	8000fcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2026      	movs	r0, #38	; 0x26
 8000940:	f000 fa7b 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000944:	2026      	movs	r0, #38	; 0x26
 8000946:	f000 fa94 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40004400 	.word	0x40004400
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f94a 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SystickCallback();
 80009b0:	f7ff fde4 	bl	800057c <SystickCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <USART2_IRQHandler+0x10>)
 80009be:	f001 f9d5 	bl	8001d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000088 	.word	0x20000088

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_isatty>:

int _isatty(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f002 fae0 	bl	8003064 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20020000 	.word	0x20020000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	200000dc 	.word	0x200000dc
 8000ad8:	20000238 	.word	0x20000238

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <initUart>:

#include "uart.h"

UART_HandleTypeDef *huart;

void initUart(UART_HandleTypeDef *inHuart) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	huart = inHuart;
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <initUart+0x1c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200000e0 	.word	0x200000e0

08000b20 <_write>:

int _write(int file, char *p, int len) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *)p, len, len);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <_write+0x28>)
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	f001 f88c 	bl	8001c54 <HAL_UART_Transmit>
	return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000e0 	.word	0x200000e0

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b50:	f7ff ffc4 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f002 fa79 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fd43 	bl	8000608 <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b90:	08003b6c 	.word	0x08003b6c
  ldr r2, =_sbss
 8000b94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b98:	20000234 	.word	0x20000234

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f92b 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fe4c 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f943 	bl	8000e8e <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f90b 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000004 	.word	0x20000004
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	200000e4 	.word	0x200000e4

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200000e4 	.word	0x200000e4

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff3e 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff31 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff feda 	bl	8000c6c <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d008      	beq.n	8000ed8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e052      	b.n	8000f7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0216 	bic.w	r2, r2, #22
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <HAL_DMA_Abort+0x62>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0208 	bic.w	r2, r2, #8
 8000f16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f28:	e013      	b.n	8000f52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f2a:	f7ff fe9f 	bl	8000c6c <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d90c      	bls.n	8000f52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2203      	movs	r2, #3
 8000f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e015      	b.n	8000f7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1e4      	bne.n	8000f2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f64:	223f      	movs	r2, #63	; 0x3f
 8000f66:	409a      	lsls	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d004      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e00c      	b.n	8000fbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2205      	movs	r2, #5
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e159      	b.n	800129c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 8148 	bne.w	8001296 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80a2 	beq.w	8001296 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_GPIO_Init+0x2ec>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_GPIO_Init+0x2f0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x202>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_GPIO_Init+0x2f4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x1fe>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a47      	ldr	r2, [pc, #284]	; (80012c4 <HAL_GPIO_Init+0x2f8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_GPIO_Init+0x2fc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x1f6>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a45      	ldr	r2, [pc, #276]	; (80012cc <HAL_GPIO_Init+0x300>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x1f2>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011be:	2307      	movs	r3, #7
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x2ec>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_GPIO_Init+0x304>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_GPIO_Init+0x304>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <HAL_GPIO_Init+0x304>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_GPIO_Init+0x304>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f aea2 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e001      	b.n	80012f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e267      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d075      	beq.n	800140e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b04      	cmp	r3, #4
 800132c:	d00c      	beq.n	8001348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b85      	ldr	r3, [pc, #532]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001336:	2b08      	cmp	r3, #8
 8001338:	d112      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133a:	4b82      	ldr	r3, [pc, #520]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001346:	d10b      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	4b7e      	ldr	r3, [pc, #504]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d05b      	beq.n	800140c <HAL_RCC_OscConfig+0x108>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d157      	bne.n	800140c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e242      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d106      	bne.n	8001378 <HAL_RCC_OscConfig+0x74>
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a75      	ldr	r2, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x98>
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6f      	ldr	r2, [pc, #444]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6c      	ldr	r2, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 800139c:	4b69      	ldr	r3, [pc, #420]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a68      	ldr	r2, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc56 	bl	8000c6c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fc52 	bl	8000c6c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e207      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xc0>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc42 	bl	8000c6c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fc3e 	bl	8000c6c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1f3      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0xe8>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1c7      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x244>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fbf7 	bl	8000c6c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fbf3 	bl	8000c6c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1a8      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4925      	ldr	r1, [pc, #148]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x244>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fbd6 	bl	8000c6c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fbd2 	bl	8000c6c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e187      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d036      	beq.n	800155c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d016      	beq.n	8001524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x248>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fbb6 	bl	8000c6c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fbb2 	bl	8000c6c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e167      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x200>
 8001522:	e01b      	b.n	800155c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_OscConfig+0x248>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb9f 	bl	8000c6c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	e00e      	b.n	8001550 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff fb9b 	bl	8000c6c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d907      	bls.n	8001550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e150      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ea      	bne.n	8001532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8097 	beq.w	8001698 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10f      	bne.n	800159a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b7d      	ldr	r3, [pc, #500]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a7c      	ldr	r2, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b77      	ldr	r3, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	4b74      	ldr	r3, [pc, #464]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a73      	ldr	r2, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb5b 	bl	8000c6c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fb57 	bl	8000c6c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e10c      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x2ea>
 80015e0:	4b64      	ldr	r3, [pc, #400]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e01c      	b.n	8001628 <HAL_RCC_OscConfig+0x324>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x30c>
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a5e      	ldr	r2, [pc, #376]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a5b      	ldr	r2, [pc, #364]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0x324>
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a57      	ldr	r2, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a54      	ldr	r2, [pc, #336]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d015      	beq.n	800165c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fb1c 	bl	8000c6c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff fb18 	bl	8000c6c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0cb      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164e:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0ee      	beq.n	8001638 <HAL_RCC_OscConfig+0x334>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff fb06 	bl	8000c6c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff fb02 	bl	8000c6c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0b5      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167a:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ee      	bne.n	8001664 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a38      	ldr	r2, [pc, #224]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a1 	beq.w	80017e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d05c      	beq.n	8001768 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d141      	bne.n	800173a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_RCC_OscConfig+0x478>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fad6 	bl	8000c6c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fad2 	bl	8000c6c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e087      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	491b      	ldr	r1, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x478>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff faab 	bl	8000c6c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff faa7 	bl	8000c6c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e05c      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x416>
 8001738:	e054      	b.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_RCC_OscConfig+0x478>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fa94 	bl	8000c6c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fa90 	bl	8000c6c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e045      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x444>
 8001766:	e03d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e038      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000
 800177c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x4ec>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d028      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d121      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d11a      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017b0:	4013      	ands	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d111      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	3b01      	subs	r3, #1
 80017ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0cc      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d90c      	bls.n	8001830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800186a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d044      	beq.n	8001914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e067      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 0203 	bic.w	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4934      	ldr	r1, [pc, #208]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e4:	f7ff f9c2 	bl	8000c6c <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ec:	f7ff f9be 	bl	8000c6c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e04f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 020c 	and.w	r2, r3, #12
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	429a      	cmp	r2, r3
 8001912:	d1eb      	bne.n	80018ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d20c      	bcs.n	800193c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f821 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490a      	ldr	r1, [pc, #40]	; (80019b4 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f922 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08003b10 	.word	0x08003b10
 80019b8:	20000004 	.word	0x20000004
 80019bc:	20000008 	.word	0x20000008

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b090      	sub	sp, #64	; 0x40
 80019c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
 80019cc:	2300      	movs	r3, #0
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x180>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d00d      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x40>
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	f200 80a1 	bhi.w	8001b2c <HAL_RCC_GetSysClockFreq+0x16c>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x3a>
 80019f2:	e09b      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x184>)
 80019f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019f8:	e09b      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019fa:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x188>)
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019fe:	e098      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0a:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d028      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	623b      	str	r3, [r7, #32]
 8001a20:	627a      	str	r2, [r7, #36]	; 0x24
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a2c:	fb03 f201 	mul.w	r2, r3, r1
 8001a30:	2300      	movs	r3, #0
 8001a32:	fb00 f303 	mul.w	r3, r0, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	4a43      	ldr	r2, [pc, #268]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a3a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a40:	460a      	mov	r2, r1
 8001a42:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a46:	4413      	add	r3, r2
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	61fa      	str	r2, [r7, #28]
 8001a52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a5a:	f7fe fc11 	bl	8000280 <__aeabi_uldivmod>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4613      	mov	r3, r2
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a66:	e053      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	2200      	movs	r2, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	617a      	str	r2, [r7, #20]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a7a:	f04f 0b00 	mov.w	fp, #0
 8001a7e:	4652      	mov	r2, sl
 8001a80:	465b      	mov	r3, fp
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	0159      	lsls	r1, r3, #5
 8001a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a90:	0150      	lsls	r0, r2, #5
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	ebb2 080a 	subs.w	r8, r2, sl
 8001a9a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001aaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001aae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ab2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ab6:	eb63 0509 	sbc.w	r5, r3, r9
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	00eb      	lsls	r3, r5, #3
 8001ac4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac8:	00e2      	lsls	r2, r4, #3
 8001aca:	4614      	mov	r4, r2
 8001acc:	461d      	mov	r5, r3
 8001ace:	eb14 030a 	adds.w	r3, r4, sl
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	eb45 030b 	adc.w	r3, r5, fp
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	028b      	lsls	r3, r1, #10
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af0:	4621      	mov	r1, r4
 8001af2:	028a      	lsls	r2, r1, #10
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	2200      	movs	r2, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	60fa      	str	r2, [r7, #12]
 8001b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b04:	f7fe fbbc 	bl	8000280 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3740      	adds	r7, #64	; 0x40
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	00f42400 	.word	0x00f42400
 8001b48:	017d7840 	.word	0x017d7840

08001b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b68:	f7ff fff0 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08003b20 	.word	0x08003b20

08001b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b90:	f7ff ffdc 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0b5b      	lsrs	r3, r3, #13
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08003b20 	.word	0x08003b20

08001bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e042      	b.n	8001c4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fe70 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fd69 	bl	80026d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d175      	bne.n	8001d60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_UART_Transmit+0x2c>
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e06e      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2221      	movs	r2, #33	; 0x21
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c92:	f7fe ffeb 	bl	8000c6c <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cac:	d108      	bne.n	8001cc0 <HAL_UART_Transmit+0x6c>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	e003      	b.n	8001cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cc8:	e02e      	b.n	8001d28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fb05 	bl	80022e4 <UART_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03a      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3302      	adds	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e007      	b.n	8001d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	3301      	adds	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1cb      	bne.n	8001cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2140      	movs	r1, #64	; 0x40
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 fad1 	bl	80022e4 <UART_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e006      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0ba      	sub	sp, #232	; 0xe8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x66>
 8001dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fbc2 	bl	8002554 <UART_Receive_IT>
      return;
 8001dd0:	e25b      	b.n	800228a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80de 	beq.w	8001f98 <HAL_UART_IRQHandler+0x22c>
 8001ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d106      	bne.n	8001df6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80d1 	beq.w	8001f98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_UART_IRQHandler+0xae>
 8001e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_UART_IRQHandler+0xd2>
 8001e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_UART_IRQHandler+0xf6>
 8001e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f043 0204 	orr.w	r2, r3, #4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d011      	beq.n	8001e92 <HAL_UART_IRQHandler+0x126>
 8001e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f043 0208 	orr.w	r2, r3, #8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 81f2 	beq.w	8002280 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_UART_IRQHandler+0x14e>
 8001ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fb4d 	bl	8002554 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d103      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x17a>
 8001ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d04f      	beq.n	8001f86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fa55 	bl	8002396 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d141      	bne.n	8001f7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3314      	adds	r3, #20
 8001f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f08:	e853 3f00 	ldrex	r3, [r3]
 8001f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3314      	adds	r3, #20
 8001f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f36:	e841 2300 	strex	r3, r2, [r1]
 8001f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1d9      	bne.n	8001efa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d013      	beq.n	8001f76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	4a7e      	ldr	r2, [pc, #504]	; (800214c <HAL_UART_IRQHandler+0x3e0>)
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f813 	bl	8000f86 <HAL_DMA_Abort_IT>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f70:	4610      	mov	r0, r2
 8001f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f74:	e00e      	b.n	8001f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f99e 	bl	80022b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f7c:	e00a      	b.n	8001f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f99a 	bl	80022b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	e006      	b.n	8001f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f996 	bl	80022b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f92:	e175      	b.n	8002280 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f94:	bf00      	nop
    return;
 8001f96:	e173      	b.n	8002280 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	f040 814f 	bne.w	8002240 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8148 	beq.w	8002240 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8141 	beq.w	8002240 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	f040 80b6 	bne.w	8002150 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ff0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8145 	beq.w	8002284 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002002:	429a      	cmp	r2, r3
 8002004:	f080 813e 	bcs.w	8002284 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800200e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201a:	f000 8088 	beq.w	800212e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	330c      	adds	r3, #12
 8002024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800202c:	e853 3f00 	ldrex	r3, [r3]
 8002030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800204a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800204e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002052:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800205a:	e841 2300 	strex	r3, r2, [r1]
 800205e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1d9      	bne.n	800201e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3314      	adds	r3, #20
 8002070:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002074:	e853 3f00 	ldrex	r3, [r3]
 8002078:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800207a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3314      	adds	r3, #20
 800208a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800208e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002092:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002094:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002096:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800209a:	e841 2300 	strex	r3, r2, [r1]
 800209e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e1      	bne.n	800206a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3314      	adds	r3, #20
 80020ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b0:	e853 3f00 	ldrex	r3, [r3]
 80020b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3314      	adds	r3, #20
 80020c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020d2:	e841 2300 	strex	r3, r2, [r1]
 80020d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1e3      	bne.n	80020a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	330c      	adds	r3, #12
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f6:	e853 3f00 	ldrex	r3, [r3]
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fe:	f023 0310 	bic.w	r3, r3, #16
 8002102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	330c      	adds	r3, #12
 800210c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002110:	65ba      	str	r2, [r7, #88]	; 0x58
 8002112:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002116:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002118:	e841 2300 	strex	r3, r2, [r1]
 800211c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800211e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e3      	bne.n	80020ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe febc 	bl	8000ea6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800213c:	b29b      	uxth	r3, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8c1 	bl	80022cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800214a:	e09b      	b.n	8002284 <HAL_UART_IRQHandler+0x518>
 800214c:	0800245d 	.word	0x0800245d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002158:	b29b      	uxth	r3, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 808e 	beq.w	8002288 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800216c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8089 	beq.w	8002288 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	330c      	adds	r3, #12
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	e853 3f00 	ldrex	r3, [r3]
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800218c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	330c      	adds	r3, #12
 8002196:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800219a:	647a      	str	r2, [r7, #68]	; 0x44
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021a2:	e841 2300 	strex	r3, r2, [r1]
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e3      	bne.n	8002176 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3314      	adds	r3, #20
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	e853 3f00 	ldrex	r3, [r3]
 80021bc:	623b      	str	r3, [r7, #32]
   return(result);
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3314      	adds	r3, #20
 80021ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021d2:	633a      	str	r2, [r7, #48]	; 0x30
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021da:	e841 2300 	strex	r3, r2, [r1]
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1e3      	bne.n	80021ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	e853 3f00 	ldrex	r3, [r3]
 8002202:	60fb      	str	r3, [r7, #12]
   return(result);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0310 	bic.w	r3, r3, #16
 800220a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	330c      	adds	r3, #12
 8002214:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002218:	61fa      	str	r2, [r7, #28]
 800221a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221c:	69b9      	ldr	r1, [r7, #24]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	e841 2300 	strex	r3, r2, [r1]
 8002224:	617b      	str	r3, [r7, #20]
   return(result);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e3      	bne.n	80021f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002232:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f847 	bl	80022cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800223e:	e023      	b.n	8002288 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_UART_IRQHandler+0x4f4>
 800224c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f913 	bl	8002484 <UART_Transmit_IT>
    return;
 800225e:	e014      	b.n	800228a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <HAL_UART_IRQHandler+0x51e>
 800226c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f953 	bl	8002524 <UART_EndTransmit_IT>
    return;
 800227e:	e004      	b.n	800228a <HAL_UART_IRQHandler+0x51e>
    return;
 8002280:	bf00      	nop
 8002282:	e002      	b.n	800228a <HAL_UART_IRQHandler+0x51e>
      return;
 8002284:	bf00      	nop
 8002286:	e000      	b.n	800228a <HAL_UART_IRQHandler+0x51e>
      return;
 8002288:	bf00      	nop
  }
}
 800228a:	37e8      	adds	r7, #232	; 0xe8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f4:	e03b      	b.n	800236e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d037      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7fe fcb5 	bl	8000c6c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	6a3a      	ldr	r2, [r7, #32]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <UART_WaitOnFlagUntilTimeout+0x30>
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e03a      	b.n	800238e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d023      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b80      	cmp	r3, #128	; 0x80
 800232a:	d020      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x8a>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d01d      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d116      	bne.n	800236e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f81d 	bl	8002396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2208      	movs	r2, #8
 8002360:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4013      	ands	r3, r2
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	bf0c      	ite	eq
 800237e:	2301      	moveq	r3, #1
 8002380:	2300      	movne	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	429a      	cmp	r2, r3
 800238a:	d0b4      	beq.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002396:	b480      	push	{r7}
 8002398:	b095      	sub	sp, #84	; 0x54
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	e853 3f00 	ldrex	r3, [r3]
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023be:	643a      	str	r2, [r7, #64]	; 0x40
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023c6:	e841 2300 	strex	r3, r2, [r1]
 80023ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e5      	bne.n	800239e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3314      	adds	r3, #20
 80023d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fa:	e841 2300 	strex	r3, r2, [r1]
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e5      	bne.n	80023d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	2b01      	cmp	r3, #1
 800240c:	d119      	bne.n	8002442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	60bb      	str	r3, [r7, #8]
   return(result);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 0310 	bic.w	r3, r3, #16
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800242e:	61ba      	str	r2, [r7, #24]
 8002430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002432:	6979      	ldr	r1, [r7, #20]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	613b      	str	r3, [r7, #16]
   return(result);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e5      	bne.n	800240e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002450:	bf00      	nop
 8002452:	3754      	adds	r7, #84	; 0x54
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff ff1e 	bl	80022b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b21      	cmp	r3, #33	; 0x21
 8002496:	d13e      	bne.n	8002516 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d114      	bne.n	80024cc <UART_Transmit_IT+0x48>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d110      	bne.n	80024cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	1c9a      	adds	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	621a      	str	r2, [r3, #32]
 80024ca:	e008      	b.n	80024de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6211      	str	r1, [r2, #32]
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4619      	mov	r1, r3
 80024ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002500:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002510:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fea3 	bl	8002290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08c      	sub	sp, #48	; 0x30
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b22      	cmp	r3, #34	; 0x22
 8002566:	f040 80ae 	bne.w	80026c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002572:	d117      	bne.n	80025a4 <UART_Receive_IT+0x50>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d113      	bne.n	80025a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002592:	b29a      	uxth	r2, r3
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
 80025a2:	e026      	b.n	80025f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b6:	d007      	beq.n	80025c8 <UART_Receive_IT+0x74>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <UART_Receive_IT+0x82>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d106      	bne.n	80025d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e008      	b.n	80025e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4619      	mov	r1, r3
 8002600:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15d      	bne.n	80026c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0220 	bic.w	r2, r2, #32
 8002614:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	2b01      	cmp	r3, #1
 800264a:	d135      	bne.n	80026b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	613b      	str	r3, [r7, #16]
   return(result);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f023 0310 	bic.w	r3, r3, #16
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002672:	623a      	str	r2, [r7, #32]
 8002674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	69f9      	ldr	r1, [r7, #28]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e5      	bne.n	8002652 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d10a      	bne.n	80026aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fe0b 	bl	80022cc <HAL_UARTEx_RxEventCallback>
 80026b6:	e002      	b.n	80026be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fdf3 	bl	80022a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e002      	b.n	80026c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
  }
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3730      	adds	r7, #48	; 0x30
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b0c0      	sub	sp, #256	; 0x100
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ec:	68d9      	ldr	r1, [r3, #12]
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	ea40 0301 	orr.w	r3, r0, r1
 80026f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	431a      	orrs	r2, r3
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002728:	f021 010c 	bic.w	r1, r1, #12
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002736:	430b      	orrs	r3, r1
 8002738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274a:	6999      	ldr	r1, [r3, #24]
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	ea40 0301 	orr.w	r3, r0, r1
 8002756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b8f      	ldr	r3, [pc, #572]	; (800299c <UART_SetConfig+0x2cc>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0xa0>
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b8d      	ldr	r3, [pc, #564]	; (80029a0 <UART_SetConfig+0x2d0>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d104      	bne.n	800277a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002770:	f7ff fa0c 	bl	8001b8c <HAL_RCC_GetPCLK2Freq>
 8002774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002778:	e003      	b.n	8002782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800277a:	f7ff f9f3 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 800277e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278c:	f040 810c 	bne.w	80029a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800279a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800279e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027a2:	4622      	mov	r2, r4
 80027a4:	462b      	mov	r3, r5
 80027a6:	1891      	adds	r1, r2, r2
 80027a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80027aa:	415b      	adcs	r3, r3
 80027ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027b2:	4621      	mov	r1, r4
 80027b4:	eb12 0801 	adds.w	r8, r2, r1
 80027b8:	4629      	mov	r1, r5
 80027ba:	eb43 0901 	adc.w	r9, r3, r1
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027d2:	4690      	mov	r8, r2
 80027d4:	4699      	mov	r9, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	eb18 0303 	adds.w	r3, r8, r3
 80027dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027e0:	462b      	mov	r3, r5
 80027e2:	eb49 0303 	adc.w	r3, r9, r3
 80027e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027fe:	460b      	mov	r3, r1
 8002800:	18db      	adds	r3, r3, r3
 8002802:	653b      	str	r3, [r7, #80]	; 0x50
 8002804:	4613      	mov	r3, r2
 8002806:	eb42 0303 	adc.w	r3, r2, r3
 800280a:	657b      	str	r3, [r7, #84]	; 0x54
 800280c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002814:	f7fd fd34 	bl	8000280 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <UART_SetConfig+0x2d4>)
 800281e:	fba3 2302 	umull	r2, r3, r3, r2
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	011c      	lsls	r4, r3, #4
 8002826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002830:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002838:	4642      	mov	r2, r8
 800283a:	464b      	mov	r3, r9
 800283c:	1891      	adds	r1, r2, r2
 800283e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002840:	415b      	adcs	r3, r3
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002848:	4641      	mov	r1, r8
 800284a:	eb12 0a01 	adds.w	sl, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb43 0b01 	adc.w	fp, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002868:	4692      	mov	sl, r2
 800286a:	469b      	mov	fp, r3
 800286c:	4643      	mov	r3, r8
 800286e:	eb1a 0303 	adds.w	r3, sl, r3
 8002872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002876:	464b      	mov	r3, r9
 8002878:	eb4b 0303 	adc.w	r3, fp, r3
 800287c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800288c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002894:	460b      	mov	r3, r1
 8002896:	18db      	adds	r3, r3, r3
 8002898:	643b      	str	r3, [r7, #64]	; 0x40
 800289a:	4613      	mov	r3, r2
 800289c:	eb42 0303 	adc.w	r3, r2, r3
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
 80028a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028aa:	f7fd fce9 	bl	8000280 <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <UART_SetConfig+0x2d4>)
 80028b6:	fba3 2301 	umull	r2, r3, r3, r1
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2264      	movs	r2, #100	; 0x64
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	1acb      	subs	r3, r1, r3
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <UART_SetConfig+0x2d4>)
 80028cc:	fba3 2302 	umull	r2, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028d8:	441c      	add	r4, r3
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	1891      	adds	r1, r2, r2
 80028f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80028f4:	415b      	adcs	r3, r3
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028fc:	4641      	mov	r1, r8
 80028fe:	1851      	adds	r1, r2, r1
 8002900:	6339      	str	r1, [r7, #48]	; 0x30
 8002902:	4649      	mov	r1, r9
 8002904:	414b      	adcs	r3, r1
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002914:	4659      	mov	r1, fp
 8002916:	00cb      	lsls	r3, r1, #3
 8002918:	4651      	mov	r1, sl
 800291a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800291e:	4651      	mov	r1, sl
 8002920:	00ca      	lsls	r2, r1, #3
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	4603      	mov	r3, r0
 8002928:	4642      	mov	r2, r8
 800292a:	189b      	adds	r3, r3, r2
 800292c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002930:	464b      	mov	r3, r9
 8002932:	460a      	mov	r2, r1
 8002934:	eb42 0303 	adc.w	r3, r2, r3
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002948:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800294c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002950:	460b      	mov	r3, r1
 8002952:	18db      	adds	r3, r3, r3
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	4613      	mov	r3, r2
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002966:	f7fd fc8b 	bl	8000280 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <UART_SetConfig+0x2d4>)
 8002970:	fba3 1302 	umull	r1, r3, r3, r2
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	2164      	movs	r1, #100	; 0x64
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	3332      	adds	r3, #50	; 0x32
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <UART_SetConfig+0x2d4>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	f003 0207 	and.w	r2, r3, #7
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4422      	add	r2, r4
 8002996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002998:	e106      	b.n	8002ba8 <UART_SetConfig+0x4d8>
 800299a:	bf00      	nop
 800299c:	40011000 	.word	0x40011000
 80029a0:	40011400 	.word	0x40011400
 80029a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029ba:	4642      	mov	r2, r8
 80029bc:	464b      	mov	r3, r9
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	6239      	str	r1, [r7, #32]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ca:	4641      	mov	r1, r8
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb43 0501 	adc.w	r5, r3, r1
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	18e3      	adds	r3, r4, r3
 80029ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029f0:	464b      	mov	r3, r9
 80029f2:	eb45 0303 	adc.w	r3, r5, r3
 80029f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a16:	4629      	mov	r1, r5
 8002a18:	008b      	lsls	r3, r1, #2
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a20:	4621      	mov	r1, r4
 8002a22:	008a      	lsls	r2, r1, #2
 8002a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a28:	f7fd fc2a 	bl	8000280 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002a32:	fba3 2302 	umull	r2, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	011c      	lsls	r4, r3, #4
 8002a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	61b9      	str	r1, [r7, #24]
 8002a54:	415b      	adcs	r3, r3
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	1851      	adds	r1, r2, r1
 8002a60:	6139      	str	r1, [r7, #16]
 8002a62:	4649      	mov	r1, r9
 8002a64:	414b      	adcs	r3, r1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a74:	4659      	mov	r1, fp
 8002a76:	00cb      	lsls	r3, r1, #3
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7e:	4651      	mov	r1, sl
 8002a80:	00ca      	lsls	r2, r1, #3
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	008b      	lsls	r3, r1, #2
 8002ab8:	4641      	mov	r1, r8
 8002aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002abe:	4641      	mov	r1, r8
 8002ac0:	008a      	lsls	r2, r1, #2
 8002ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ac6:	f7fd fbdb 	bl	8000280 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2264      	movs	r2, #100	; 0x64
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	1acb      	subs	r3, r1, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	4a33      	ldr	r2, [pc, #204]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af0:	441c      	add	r4, r3
 8002af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af6:	2200      	movs	r2, #0
 8002af8:	673b      	str	r3, [r7, #112]	; 0x70
 8002afa:	677a      	str	r2, [r7, #116]	; 0x74
 8002afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b42:	464b      	mov	r3, r9
 8002b44:	460a      	mov	r2, r1
 8002b46:	eb42 0303 	adc.w	r3, r2, r3
 8002b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
 8002b56:	667a      	str	r2, [r7, #100]	; 0x64
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b64:	4649      	mov	r1, r9
 8002b66:	008b      	lsls	r3, r1, #2
 8002b68:	4641      	mov	r1, r8
 8002b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b6e:	4641      	mov	r1, r8
 8002b70:	008a      	lsls	r2, r1, #2
 8002b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b76:	f7fd fb83 	bl	8000280 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 020f 	and.w	r2, r3, #15
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb4:	51eb851f 	.word	0x51eb851f

08002bb8 <std>:
 8002bb8:	2300      	movs	r3, #0
 8002bba:	b510      	push	{r4, lr}
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8002bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bc6:	6083      	str	r3, [r0, #8]
 8002bc8:	8181      	strh	r1, [r0, #12]
 8002bca:	6643      	str	r3, [r0, #100]	; 0x64
 8002bcc:	81c2      	strh	r2, [r0, #14]
 8002bce:	6183      	str	r3, [r0, #24]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	305c      	adds	r0, #92	; 0x5c
 8002bd6:	f000 f9f7 	bl	8002fc8 <memset>
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <std+0x58>)
 8002bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <std+0x5c>)
 8002be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <std+0x60>)
 8002be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <std+0x64>)
 8002be8:	6323      	str	r3, [r4, #48]	; 0x30
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <std+0x68>)
 8002bec:	6224      	str	r4, [r4, #32]
 8002bee:	429c      	cmp	r4, r3
 8002bf0:	d006      	beq.n	8002c00 <std+0x48>
 8002bf2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002bf6:	4294      	cmp	r4, r2
 8002bf8:	d002      	beq.n	8002c00 <std+0x48>
 8002bfa:	33d0      	adds	r3, #208	; 0xd0
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	d105      	bne.n	8002c0c <std+0x54>
 8002c00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c08:	f000 ba56 	b.w	80030b8 <__retarget_lock_init_recursive>
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	bf00      	nop
 8002c10:	08002e19 	.word	0x08002e19
 8002c14:	08002e3b 	.word	0x08002e3b
 8002c18:	08002e73 	.word	0x08002e73
 8002c1c:	08002e97 	.word	0x08002e97
 8002c20:	200000e8 	.word	0x200000e8

08002c24 <stdio_exit_handler>:
 8002c24:	4a02      	ldr	r2, [pc, #8]	; (8002c30 <stdio_exit_handler+0xc>)
 8002c26:	4903      	ldr	r1, [pc, #12]	; (8002c34 <stdio_exit_handler+0x10>)
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <stdio_exit_handler+0x14>)
 8002c2a:	f000 b869 	b.w	8002d00 <_fwalk_sglue>
 8002c2e:	bf00      	nop
 8002c30:	20000010 	.word	0x20000010
 8002c34:	08003965 	.word	0x08003965
 8002c38:	2000001c 	.word	0x2000001c

08002c3c <cleanup_stdio>:
 8002c3c:	6841      	ldr	r1, [r0, #4]
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <cleanup_stdio+0x34>)
 8002c40:	4299      	cmp	r1, r3
 8002c42:	b510      	push	{r4, lr}
 8002c44:	4604      	mov	r4, r0
 8002c46:	d001      	beq.n	8002c4c <cleanup_stdio+0x10>
 8002c48:	f000 fe8c 	bl	8003964 <_fflush_r>
 8002c4c:	68a1      	ldr	r1, [r4, #8]
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <cleanup_stdio+0x38>)
 8002c50:	4299      	cmp	r1, r3
 8002c52:	d002      	beq.n	8002c5a <cleanup_stdio+0x1e>
 8002c54:	4620      	mov	r0, r4
 8002c56:	f000 fe85 	bl	8003964 <_fflush_r>
 8002c5a:	68e1      	ldr	r1, [r4, #12]
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <cleanup_stdio+0x3c>)
 8002c5e:	4299      	cmp	r1, r3
 8002c60:	d004      	beq.n	8002c6c <cleanup_stdio+0x30>
 8002c62:	4620      	mov	r0, r4
 8002c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c68:	f000 be7c 	b.w	8003964 <_fflush_r>
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	bf00      	nop
 8002c70:	200000e8 	.word	0x200000e8
 8002c74:	20000150 	.word	0x20000150
 8002c78:	200001b8 	.word	0x200001b8

08002c7c <global_stdio_init.part.0>:
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <global_stdio_init.part.0+0x30>)
 8002c80:	4c0b      	ldr	r4, [pc, #44]	; (8002cb0 <global_stdio_init.part.0+0x34>)
 8002c82:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <global_stdio_init.part.0+0x38>)
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	4620      	mov	r0, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2104      	movs	r1, #4
 8002c8c:	f7ff ff94 	bl	8002bb8 <std>
 8002c90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002c94:	2201      	movs	r2, #1
 8002c96:	2109      	movs	r1, #9
 8002c98:	f7ff ff8e 	bl	8002bb8 <std>
 8002c9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca6:	2112      	movs	r1, #18
 8002ca8:	f7ff bf86 	b.w	8002bb8 <std>
 8002cac:	20000220 	.word	0x20000220
 8002cb0:	200000e8 	.word	0x200000e8
 8002cb4:	08002c25 	.word	0x08002c25

08002cb8 <__sfp_lock_acquire>:
 8002cb8:	4801      	ldr	r0, [pc, #4]	; (8002cc0 <__sfp_lock_acquire+0x8>)
 8002cba:	f000 b9fe 	b.w	80030ba <__retarget_lock_acquire_recursive>
 8002cbe:	bf00      	nop
 8002cc0:	20000229 	.word	0x20000229

08002cc4 <__sfp_lock_release>:
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <__sfp_lock_release+0x8>)
 8002cc6:	f000 b9f9 	b.w	80030bc <__retarget_lock_release_recursive>
 8002cca:	bf00      	nop
 8002ccc:	20000229 	.word	0x20000229

08002cd0 <__sinit>:
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	f7ff fff0 	bl	8002cb8 <__sfp_lock_acquire>
 8002cd8:	6a23      	ldr	r3, [r4, #32]
 8002cda:	b11b      	cbz	r3, 8002ce4 <__sinit+0x14>
 8002cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ce0:	f7ff bff0 	b.w	8002cc4 <__sfp_lock_release>
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__sinit+0x28>)
 8002ce6:	6223      	str	r3, [r4, #32]
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__sinit+0x2c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f5      	bne.n	8002cdc <__sinit+0xc>
 8002cf0:	f7ff ffc4 	bl	8002c7c <global_stdio_init.part.0>
 8002cf4:	e7f2      	b.n	8002cdc <__sinit+0xc>
 8002cf6:	bf00      	nop
 8002cf8:	08002c3d 	.word	0x08002c3d
 8002cfc:	20000220 	.word	0x20000220

08002d00 <_fwalk_sglue>:
 8002d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d04:	4607      	mov	r7, r0
 8002d06:	4688      	mov	r8, r1
 8002d08:	4614      	mov	r4, r2
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d10:	f1b9 0901 	subs.w	r9, r9, #1
 8002d14:	d505      	bpl.n	8002d22 <_fwalk_sglue+0x22>
 8002d16:	6824      	ldr	r4, [r4, #0]
 8002d18:	2c00      	cmp	r4, #0
 8002d1a:	d1f7      	bne.n	8002d0c <_fwalk_sglue+0xc>
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d22:	89ab      	ldrh	r3, [r5, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d907      	bls.n	8002d38 <_fwalk_sglue+0x38>
 8002d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	d003      	beq.n	8002d38 <_fwalk_sglue+0x38>
 8002d30:	4629      	mov	r1, r5
 8002d32:	4638      	mov	r0, r7
 8002d34:	47c0      	blx	r8
 8002d36:	4306      	orrs	r6, r0
 8002d38:	3568      	adds	r5, #104	; 0x68
 8002d3a:	e7e9      	b.n	8002d10 <_fwalk_sglue+0x10>

08002d3c <iprintf>:
 8002d3c:	b40f      	push	{r0, r1, r2, r3}
 8002d3e:	b507      	push	{r0, r1, r2, lr}
 8002d40:	4906      	ldr	r1, [pc, #24]	; (8002d5c <iprintf+0x20>)
 8002d42:	ab04      	add	r3, sp, #16
 8002d44:	6808      	ldr	r0, [r1, #0]
 8002d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d4a:	6881      	ldr	r1, [r0, #8]
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	f000 fad9 	bl	8003304 <_vfiprintf_r>
 8002d52:	b003      	add	sp, #12
 8002d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d58:	b004      	add	sp, #16
 8002d5a:	4770      	bx	lr
 8002d5c:	20000068 	.word	0x20000068

08002d60 <_puts_r>:
 8002d60:	6a03      	ldr	r3, [r0, #32]
 8002d62:	b570      	push	{r4, r5, r6, lr}
 8002d64:	6884      	ldr	r4, [r0, #8]
 8002d66:	4605      	mov	r5, r0
 8002d68:	460e      	mov	r6, r1
 8002d6a:	b90b      	cbnz	r3, 8002d70 <_puts_r+0x10>
 8002d6c:	f7ff ffb0 	bl	8002cd0 <__sinit>
 8002d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d72:	07db      	lsls	r3, r3, #31
 8002d74:	d405      	bmi.n	8002d82 <_puts_r+0x22>
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	0598      	lsls	r0, r3, #22
 8002d7a:	d402      	bmi.n	8002d82 <_puts_r+0x22>
 8002d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d7e:	f000 f99c 	bl	80030ba <__retarget_lock_acquire_recursive>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	0719      	lsls	r1, r3, #28
 8002d86:	d513      	bpl.n	8002db0 <_puts_r+0x50>
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	b18b      	cbz	r3, 8002db0 <_puts_r+0x50>
 8002d8c:	3e01      	subs	r6, #1
 8002d8e:	68a3      	ldr	r3, [r4, #8]
 8002d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60a3      	str	r3, [r4, #8]
 8002d98:	b9e9      	cbnz	r1, 8002dd6 <_puts_r+0x76>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da2e      	bge.n	8002dfc <_puts_r+0x9c>
 8002d9e:	4622      	mov	r2, r4
 8002da0:	210a      	movs	r1, #10
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 f87b 	bl	8002e9e <__swbuf_r>
 8002da8:	3001      	adds	r0, #1
 8002daa:	d007      	beq.n	8002dbc <_puts_r+0x5c>
 8002dac:	250a      	movs	r5, #10
 8002dae:	e007      	b.n	8002dc0 <_puts_r+0x60>
 8002db0:	4621      	mov	r1, r4
 8002db2:	4628      	mov	r0, r5
 8002db4:	f000 f8b0 	bl	8002f18 <__swsetup_r>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d0e7      	beq.n	8002d8c <_puts_r+0x2c>
 8002dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8002dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dc2:	07da      	lsls	r2, r3, #31
 8002dc4:	d405      	bmi.n	8002dd2 <_puts_r+0x72>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	059b      	lsls	r3, r3, #22
 8002dca:	d402      	bmi.n	8002dd2 <_puts_r+0x72>
 8002dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dce:	f000 f975 	bl	80030bc <__retarget_lock_release_recursive>
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da04      	bge.n	8002de4 <_puts_r+0x84>
 8002dda:	69a2      	ldr	r2, [r4, #24]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	dc06      	bgt.n	8002dee <_puts_r+0x8e>
 8002de0:	290a      	cmp	r1, #10
 8002de2:	d004      	beq.n	8002dee <_puts_r+0x8e>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	6022      	str	r2, [r4, #0]
 8002dea:	7019      	strb	r1, [r3, #0]
 8002dec:	e7cf      	b.n	8002d8e <_puts_r+0x2e>
 8002dee:	4622      	mov	r2, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 f854 	bl	8002e9e <__swbuf_r>
 8002df6:	3001      	adds	r0, #1
 8002df8:	d1c9      	bne.n	8002d8e <_puts_r+0x2e>
 8002dfa:	e7df      	b.n	8002dbc <_puts_r+0x5c>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	250a      	movs	r5, #10
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	6022      	str	r2, [r4, #0]
 8002e04:	701d      	strb	r5, [r3, #0]
 8002e06:	e7db      	b.n	8002dc0 <_puts_r+0x60>

08002e08 <puts>:
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <puts+0xc>)
 8002e0a:	4601      	mov	r1, r0
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	f7ff bfa7 	b.w	8002d60 <_puts_r>
 8002e12:	bf00      	nop
 8002e14:	20000068 	.word	0x20000068

08002e18 <__sread>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e20:	f000 f8fc 	bl	800301c <_read_r>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	bfab      	itete	ge
 8002e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e2c:	181b      	addge	r3, r3, r0
 8002e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e32:	bfac      	ite	ge
 8002e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e36:	81a3      	strhlt	r3, [r4, #12]
 8002e38:	bd10      	pop	{r4, pc}

08002e3a <__swrite>:
 8002e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e3e:	461f      	mov	r7, r3
 8002e40:	898b      	ldrh	r3, [r1, #12]
 8002e42:	05db      	lsls	r3, r3, #23
 8002e44:	4605      	mov	r5, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	4616      	mov	r6, r2
 8002e4a:	d505      	bpl.n	8002e58 <__swrite+0x1e>
 8002e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e50:	2302      	movs	r3, #2
 8002e52:	2200      	movs	r2, #0
 8002e54:	f000 f8d0 	bl	8002ff8 <_lseek_r>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e62:	81a3      	strh	r3, [r4, #12]
 8002e64:	4632      	mov	r2, r6
 8002e66:	463b      	mov	r3, r7
 8002e68:	4628      	mov	r0, r5
 8002e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6e:	f000 b8e7 	b.w	8003040 <_write_r>

08002e72 <__sseek>:
 8002e72:	b510      	push	{r4, lr}
 8002e74:	460c      	mov	r4, r1
 8002e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7a:	f000 f8bd 	bl	8002ff8 <_lseek_r>
 8002e7e:	1c43      	adds	r3, r0, #1
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	bf15      	itete	ne
 8002e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e8e:	81a3      	strheq	r3, [r4, #12]
 8002e90:	bf18      	it	ne
 8002e92:	81a3      	strhne	r3, [r4, #12]
 8002e94:	bd10      	pop	{r4, pc}

08002e96 <__sclose>:
 8002e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e9a:	f000 b89d 	b.w	8002fd8 <_close_r>

08002e9e <__swbuf_r>:
 8002e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea0:	460e      	mov	r6, r1
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	4605      	mov	r5, r0
 8002ea6:	b118      	cbz	r0, 8002eb0 <__swbuf_r+0x12>
 8002ea8:	6a03      	ldr	r3, [r0, #32]
 8002eaa:	b90b      	cbnz	r3, 8002eb0 <__swbuf_r+0x12>
 8002eac:	f7ff ff10 	bl	8002cd0 <__sinit>
 8002eb0:	69a3      	ldr	r3, [r4, #24]
 8002eb2:	60a3      	str	r3, [r4, #8]
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	071a      	lsls	r2, r3, #28
 8002eb8:	d525      	bpl.n	8002f06 <__swbuf_r+0x68>
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	b31b      	cbz	r3, 8002f06 <__swbuf_r+0x68>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	6922      	ldr	r2, [r4, #16]
 8002ec2:	1a98      	subs	r0, r3, r2
 8002ec4:	6963      	ldr	r3, [r4, #20]
 8002ec6:	b2f6      	uxtb	r6, r6
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	4637      	mov	r7, r6
 8002ecc:	dc04      	bgt.n	8002ed8 <__swbuf_r+0x3a>
 8002ece:	4621      	mov	r1, r4
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f000 fd47 	bl	8003964 <_fflush_r>
 8002ed6:	b9e0      	cbnz	r0, 8002f12 <__swbuf_r+0x74>
 8002ed8:	68a3      	ldr	r3, [r4, #8]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	6022      	str	r2, [r4, #0]
 8002ee4:	701e      	strb	r6, [r3, #0]
 8002ee6:	6962      	ldr	r2, [r4, #20]
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d004      	beq.n	8002ef8 <__swbuf_r+0x5a>
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	07db      	lsls	r3, r3, #31
 8002ef2:	d506      	bpl.n	8002f02 <__swbuf_r+0x64>
 8002ef4:	2e0a      	cmp	r6, #10
 8002ef6:	d104      	bne.n	8002f02 <__swbuf_r+0x64>
 8002ef8:	4621      	mov	r1, r4
 8002efa:	4628      	mov	r0, r5
 8002efc:	f000 fd32 	bl	8003964 <_fflush_r>
 8002f00:	b938      	cbnz	r0, 8002f12 <__swbuf_r+0x74>
 8002f02:	4638      	mov	r0, r7
 8002f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 f805 	bl	8002f18 <__swsetup_r>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d0d5      	beq.n	8002ebe <__swbuf_r+0x20>
 8002f12:	f04f 37ff 	mov.w	r7, #4294967295
 8002f16:	e7f4      	b.n	8002f02 <__swbuf_r+0x64>

08002f18 <__swsetup_r>:
 8002f18:	b538      	push	{r3, r4, r5, lr}
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <__swsetup_r+0xac>)
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	460c      	mov	r4, r1
 8002f22:	b118      	cbz	r0, 8002f2c <__swsetup_r+0x14>
 8002f24:	6a03      	ldr	r3, [r0, #32]
 8002f26:	b90b      	cbnz	r3, 8002f2c <__swsetup_r+0x14>
 8002f28:	f7ff fed2 	bl	8002cd0 <__sinit>
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f32:	0718      	lsls	r0, r3, #28
 8002f34:	d422      	bmi.n	8002f7c <__swsetup_r+0x64>
 8002f36:	06d9      	lsls	r1, r3, #27
 8002f38:	d407      	bmi.n	8002f4a <__swsetup_r+0x32>
 8002f3a:	2309      	movs	r3, #9
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f42:	81a3      	strh	r3, [r4, #12]
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	e034      	b.n	8002fb4 <__swsetup_r+0x9c>
 8002f4a:	0758      	lsls	r0, r3, #29
 8002f4c:	d512      	bpl.n	8002f74 <__swsetup_r+0x5c>
 8002f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f50:	b141      	cbz	r1, 8002f64 <__swsetup_r+0x4c>
 8002f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f56:	4299      	cmp	r1, r3
 8002f58:	d002      	beq.n	8002f60 <__swsetup_r+0x48>
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f000 f8b0 	bl	80030c0 <_free_r>
 8002f60:	2300      	movs	r3, #0
 8002f62:	6363      	str	r3, [r4, #52]	; 0x34
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	6063      	str	r3, [r4, #4]
 8002f70:	6923      	ldr	r3, [r4, #16]
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	81a3      	strh	r3, [r4, #12]
 8002f7c:	6923      	ldr	r3, [r4, #16]
 8002f7e:	b94b      	cbnz	r3, 8002f94 <__swsetup_r+0x7c>
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8a:	d003      	beq.n	8002f94 <__swsetup_r+0x7c>
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f000 fd36 	bl	8003a00 <__smakebuf_r>
 8002f94:	89a0      	ldrh	r0, [r4, #12]
 8002f96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f9a:	f010 0301 	ands.w	r3, r0, #1
 8002f9e:	d00a      	beq.n	8002fb6 <__swsetup_r+0x9e>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60a3      	str	r3, [r4, #8]
 8002fa4:	6963      	ldr	r3, [r4, #20]
 8002fa6:	425b      	negs	r3, r3
 8002fa8:	61a3      	str	r3, [r4, #24]
 8002faa:	6923      	ldr	r3, [r4, #16]
 8002fac:	b943      	cbnz	r3, 8002fc0 <__swsetup_r+0xa8>
 8002fae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002fb2:	d1c4      	bne.n	8002f3e <__swsetup_r+0x26>
 8002fb4:	bd38      	pop	{r3, r4, r5, pc}
 8002fb6:	0781      	lsls	r1, r0, #30
 8002fb8:	bf58      	it	pl
 8002fba:	6963      	ldrpl	r3, [r4, #20]
 8002fbc:	60a3      	str	r3, [r4, #8]
 8002fbe:	e7f4      	b.n	8002faa <__swsetup_r+0x92>
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7f7      	b.n	8002fb4 <__swsetup_r+0x9c>
 8002fc4:	20000068 	.word	0x20000068

08002fc8 <memset>:
 8002fc8:	4402      	add	r2, r0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <memset+0xa>
 8002fd0:	4770      	bx	lr
 8002fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fd6:	e7f9      	b.n	8002fcc <memset+0x4>

08002fd8 <_close_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4d06      	ldr	r5, [pc, #24]	; (8002ff4 <_close_r+0x1c>)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	4604      	mov	r4, r0
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	602b      	str	r3, [r5, #0]
 8002fe4:	f7fd fd0f 	bl	8000a06 <_close>
 8002fe8:	1c43      	adds	r3, r0, #1
 8002fea:	d102      	bne.n	8002ff2 <_close_r+0x1a>
 8002fec:	682b      	ldr	r3, [r5, #0]
 8002fee:	b103      	cbz	r3, 8002ff2 <_close_r+0x1a>
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
 8002ff4:	20000224 	.word	0x20000224

08002ff8 <_lseek_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4d07      	ldr	r5, [pc, #28]	; (8003018 <_lseek_r+0x20>)
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	4608      	mov	r0, r1
 8003000:	4611      	mov	r1, r2
 8003002:	2200      	movs	r2, #0
 8003004:	602a      	str	r2, [r5, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	f7fd fd24 	bl	8000a54 <_lseek>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d102      	bne.n	8003016 <_lseek_r+0x1e>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	b103      	cbz	r3, 8003016 <_lseek_r+0x1e>
 8003014:	6023      	str	r3, [r4, #0]
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	20000224 	.word	0x20000224

0800301c <_read_r>:
 800301c:	b538      	push	{r3, r4, r5, lr}
 800301e:	4d07      	ldr	r5, [pc, #28]	; (800303c <_read_r+0x20>)
 8003020:	4604      	mov	r4, r0
 8003022:	4608      	mov	r0, r1
 8003024:	4611      	mov	r1, r2
 8003026:	2200      	movs	r2, #0
 8003028:	602a      	str	r2, [r5, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	f7fd fcce 	bl	80009cc <_read>
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d102      	bne.n	800303a <_read_r+0x1e>
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	b103      	cbz	r3, 800303a <_read_r+0x1e>
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	20000224 	.word	0x20000224

08003040 <_write_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4d07      	ldr	r5, [pc, #28]	; (8003060 <_write_r+0x20>)
 8003044:	4604      	mov	r4, r0
 8003046:	4608      	mov	r0, r1
 8003048:	4611      	mov	r1, r2
 800304a:	2200      	movs	r2, #0
 800304c:	602a      	str	r2, [r5, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f7fd fd66 	bl	8000b20 <_write>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d102      	bne.n	800305e <_write_r+0x1e>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	b103      	cbz	r3, 800305e <_write_r+0x1e>
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	20000224 	.word	0x20000224

08003064 <__errno>:
 8003064:	4b01      	ldr	r3, [pc, #4]	; (800306c <__errno+0x8>)
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000068 	.word	0x20000068

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4d0d      	ldr	r5, [pc, #52]	; (80030a8 <__libc_init_array+0x38>)
 8003074:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003076:	1b64      	subs	r4, r4, r5
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	2600      	movs	r6, #0
 800307c:	42a6      	cmp	r6, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	4d0b      	ldr	r5, [pc, #44]	; (80030b0 <__libc_init_array+0x40>)
 8003082:	4c0c      	ldr	r4, [pc, #48]	; (80030b4 <__libc_init_array+0x44>)
 8003084:	f000 fd2a 	bl	8003adc <_init>
 8003088:	1b64      	subs	r4, r4, r5
 800308a:	10a4      	asrs	r4, r4, #2
 800308c:	2600      	movs	r6, #0
 800308e:	42a6      	cmp	r6, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f855 3b04 	ldr.w	r3, [r5], #4
 8003098:	4798      	blx	r3
 800309a:	3601      	adds	r6, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a2:	4798      	blx	r3
 80030a4:	3601      	adds	r6, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	08003b64 	.word	0x08003b64
 80030ac:	08003b64 	.word	0x08003b64
 80030b0:	08003b64 	.word	0x08003b64
 80030b4:	08003b68 	.word	0x08003b68

080030b8 <__retarget_lock_init_recursive>:
 80030b8:	4770      	bx	lr

080030ba <__retarget_lock_acquire_recursive>:
 80030ba:	4770      	bx	lr

080030bc <__retarget_lock_release_recursive>:
 80030bc:	4770      	bx	lr
	...

080030c0 <_free_r>:
 80030c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030c2:	2900      	cmp	r1, #0
 80030c4:	d044      	beq.n	8003150 <_free_r+0x90>
 80030c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030ca:	9001      	str	r0, [sp, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f1a1 0404 	sub.w	r4, r1, #4
 80030d2:	bfb8      	it	lt
 80030d4:	18e4      	addlt	r4, r4, r3
 80030d6:	f000 f8df 	bl	8003298 <__malloc_lock>
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <_free_r+0x94>)
 80030dc:	9801      	ldr	r0, [sp, #4]
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	b933      	cbnz	r3, 80030f0 <_free_r+0x30>
 80030e2:	6063      	str	r3, [r4, #4]
 80030e4:	6014      	str	r4, [r2, #0]
 80030e6:	b003      	add	sp, #12
 80030e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030ec:	f000 b8da 	b.w	80032a4 <__malloc_unlock>
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d908      	bls.n	8003106 <_free_r+0x46>
 80030f4:	6825      	ldr	r5, [r4, #0]
 80030f6:	1961      	adds	r1, r4, r5
 80030f8:	428b      	cmp	r3, r1
 80030fa:	bf01      	itttt	eq
 80030fc:	6819      	ldreq	r1, [r3, #0]
 80030fe:	685b      	ldreq	r3, [r3, #4]
 8003100:	1949      	addeq	r1, r1, r5
 8003102:	6021      	streq	r1, [r4, #0]
 8003104:	e7ed      	b.n	80030e2 <_free_r+0x22>
 8003106:	461a      	mov	r2, r3
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	b10b      	cbz	r3, 8003110 <_free_r+0x50>
 800310c:	42a3      	cmp	r3, r4
 800310e:	d9fa      	bls.n	8003106 <_free_r+0x46>
 8003110:	6811      	ldr	r1, [r2, #0]
 8003112:	1855      	adds	r5, r2, r1
 8003114:	42a5      	cmp	r5, r4
 8003116:	d10b      	bne.n	8003130 <_free_r+0x70>
 8003118:	6824      	ldr	r4, [r4, #0]
 800311a:	4421      	add	r1, r4
 800311c:	1854      	adds	r4, r2, r1
 800311e:	42a3      	cmp	r3, r4
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	d1e0      	bne.n	80030e6 <_free_r+0x26>
 8003124:	681c      	ldr	r4, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	6053      	str	r3, [r2, #4]
 800312a:	440c      	add	r4, r1
 800312c:	6014      	str	r4, [r2, #0]
 800312e:	e7da      	b.n	80030e6 <_free_r+0x26>
 8003130:	d902      	bls.n	8003138 <_free_r+0x78>
 8003132:	230c      	movs	r3, #12
 8003134:	6003      	str	r3, [r0, #0]
 8003136:	e7d6      	b.n	80030e6 <_free_r+0x26>
 8003138:	6825      	ldr	r5, [r4, #0]
 800313a:	1961      	adds	r1, r4, r5
 800313c:	428b      	cmp	r3, r1
 800313e:	bf04      	itt	eq
 8003140:	6819      	ldreq	r1, [r3, #0]
 8003142:	685b      	ldreq	r3, [r3, #4]
 8003144:	6063      	str	r3, [r4, #4]
 8003146:	bf04      	itt	eq
 8003148:	1949      	addeq	r1, r1, r5
 800314a:	6021      	streq	r1, [r4, #0]
 800314c:	6054      	str	r4, [r2, #4]
 800314e:	e7ca      	b.n	80030e6 <_free_r+0x26>
 8003150:	b003      	add	sp, #12
 8003152:	bd30      	pop	{r4, r5, pc}
 8003154:	2000022c 	.word	0x2000022c

08003158 <sbrk_aligned>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4e0e      	ldr	r6, [pc, #56]	; (8003194 <sbrk_aligned+0x3c>)
 800315c:	460c      	mov	r4, r1
 800315e:	6831      	ldr	r1, [r6, #0]
 8003160:	4605      	mov	r5, r0
 8003162:	b911      	cbnz	r1, 800316a <sbrk_aligned+0x12>
 8003164:	f000 fcaa 	bl	8003abc <_sbrk_r>
 8003168:	6030      	str	r0, [r6, #0]
 800316a:	4621      	mov	r1, r4
 800316c:	4628      	mov	r0, r5
 800316e:	f000 fca5 	bl	8003abc <_sbrk_r>
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	d00a      	beq.n	800318c <sbrk_aligned+0x34>
 8003176:	1cc4      	adds	r4, r0, #3
 8003178:	f024 0403 	bic.w	r4, r4, #3
 800317c:	42a0      	cmp	r0, r4
 800317e:	d007      	beq.n	8003190 <sbrk_aligned+0x38>
 8003180:	1a21      	subs	r1, r4, r0
 8003182:	4628      	mov	r0, r5
 8003184:	f000 fc9a 	bl	8003abc <_sbrk_r>
 8003188:	3001      	adds	r0, #1
 800318a:	d101      	bne.n	8003190 <sbrk_aligned+0x38>
 800318c:	f04f 34ff 	mov.w	r4, #4294967295
 8003190:	4620      	mov	r0, r4
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	20000230 	.word	0x20000230

08003198 <_malloc_r>:
 8003198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800319c:	1ccd      	adds	r5, r1, #3
 800319e:	f025 0503 	bic.w	r5, r5, #3
 80031a2:	3508      	adds	r5, #8
 80031a4:	2d0c      	cmp	r5, #12
 80031a6:	bf38      	it	cc
 80031a8:	250c      	movcc	r5, #12
 80031aa:	2d00      	cmp	r5, #0
 80031ac:	4607      	mov	r7, r0
 80031ae:	db01      	blt.n	80031b4 <_malloc_r+0x1c>
 80031b0:	42a9      	cmp	r1, r5
 80031b2:	d905      	bls.n	80031c0 <_malloc_r+0x28>
 80031b4:	230c      	movs	r3, #12
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	2600      	movs	r6, #0
 80031ba:	4630      	mov	r0, r6
 80031bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003294 <_malloc_r+0xfc>
 80031c4:	f000 f868 	bl	8003298 <__malloc_lock>
 80031c8:	f8d8 3000 	ldr.w	r3, [r8]
 80031cc:	461c      	mov	r4, r3
 80031ce:	bb5c      	cbnz	r4, 8003228 <_malloc_r+0x90>
 80031d0:	4629      	mov	r1, r5
 80031d2:	4638      	mov	r0, r7
 80031d4:	f7ff ffc0 	bl	8003158 <sbrk_aligned>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	4604      	mov	r4, r0
 80031dc:	d155      	bne.n	800328a <_malloc_r+0xf2>
 80031de:	f8d8 4000 	ldr.w	r4, [r8]
 80031e2:	4626      	mov	r6, r4
 80031e4:	2e00      	cmp	r6, #0
 80031e6:	d145      	bne.n	8003274 <_malloc_r+0xdc>
 80031e8:	2c00      	cmp	r4, #0
 80031ea:	d048      	beq.n	800327e <_malloc_r+0xe6>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	4631      	mov	r1, r6
 80031f0:	4638      	mov	r0, r7
 80031f2:	eb04 0903 	add.w	r9, r4, r3
 80031f6:	f000 fc61 	bl	8003abc <_sbrk_r>
 80031fa:	4581      	cmp	r9, r0
 80031fc:	d13f      	bne.n	800327e <_malloc_r+0xe6>
 80031fe:	6821      	ldr	r1, [r4, #0]
 8003200:	1a6d      	subs	r5, r5, r1
 8003202:	4629      	mov	r1, r5
 8003204:	4638      	mov	r0, r7
 8003206:	f7ff ffa7 	bl	8003158 <sbrk_aligned>
 800320a:	3001      	adds	r0, #1
 800320c:	d037      	beq.n	800327e <_malloc_r+0xe6>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	442b      	add	r3, r5
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	f8d8 3000 	ldr.w	r3, [r8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d038      	beq.n	800328e <_malloc_r+0xf6>
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	42a2      	cmp	r2, r4
 8003220:	d12b      	bne.n	800327a <_malloc_r+0xe2>
 8003222:	2200      	movs	r2, #0
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e00f      	b.n	8003248 <_malloc_r+0xb0>
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	1b52      	subs	r2, r2, r5
 800322c:	d41f      	bmi.n	800326e <_malloc_r+0xd6>
 800322e:	2a0b      	cmp	r2, #11
 8003230:	d917      	bls.n	8003262 <_malloc_r+0xca>
 8003232:	1961      	adds	r1, r4, r5
 8003234:	42a3      	cmp	r3, r4
 8003236:	6025      	str	r5, [r4, #0]
 8003238:	bf18      	it	ne
 800323a:	6059      	strne	r1, [r3, #4]
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	bf08      	it	eq
 8003240:	f8c8 1000 	streq.w	r1, [r8]
 8003244:	5162      	str	r2, [r4, r5]
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	4638      	mov	r0, r7
 800324a:	f104 060b 	add.w	r6, r4, #11
 800324e:	f000 f829 	bl	80032a4 <__malloc_unlock>
 8003252:	f026 0607 	bic.w	r6, r6, #7
 8003256:	1d23      	adds	r3, r4, #4
 8003258:	1af2      	subs	r2, r6, r3
 800325a:	d0ae      	beq.n	80031ba <_malloc_r+0x22>
 800325c:	1b9b      	subs	r3, r3, r6
 800325e:	50a3      	str	r3, [r4, r2]
 8003260:	e7ab      	b.n	80031ba <_malloc_r+0x22>
 8003262:	42a3      	cmp	r3, r4
 8003264:	6862      	ldr	r2, [r4, #4]
 8003266:	d1dd      	bne.n	8003224 <_malloc_r+0x8c>
 8003268:	f8c8 2000 	str.w	r2, [r8]
 800326c:	e7ec      	b.n	8003248 <_malloc_r+0xb0>
 800326e:	4623      	mov	r3, r4
 8003270:	6864      	ldr	r4, [r4, #4]
 8003272:	e7ac      	b.n	80031ce <_malloc_r+0x36>
 8003274:	4634      	mov	r4, r6
 8003276:	6876      	ldr	r6, [r6, #4]
 8003278:	e7b4      	b.n	80031e4 <_malloc_r+0x4c>
 800327a:	4613      	mov	r3, r2
 800327c:	e7cc      	b.n	8003218 <_malloc_r+0x80>
 800327e:	230c      	movs	r3, #12
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	4638      	mov	r0, r7
 8003284:	f000 f80e 	bl	80032a4 <__malloc_unlock>
 8003288:	e797      	b.n	80031ba <_malloc_r+0x22>
 800328a:	6025      	str	r5, [r4, #0]
 800328c:	e7dc      	b.n	8003248 <_malloc_r+0xb0>
 800328e:	605b      	str	r3, [r3, #4]
 8003290:	deff      	udf	#255	; 0xff
 8003292:	bf00      	nop
 8003294:	2000022c 	.word	0x2000022c

08003298 <__malloc_lock>:
 8003298:	4801      	ldr	r0, [pc, #4]	; (80032a0 <__malloc_lock+0x8>)
 800329a:	f7ff bf0e 	b.w	80030ba <__retarget_lock_acquire_recursive>
 800329e:	bf00      	nop
 80032a0:	20000228 	.word	0x20000228

080032a4 <__malloc_unlock>:
 80032a4:	4801      	ldr	r0, [pc, #4]	; (80032ac <__malloc_unlock+0x8>)
 80032a6:	f7ff bf09 	b.w	80030bc <__retarget_lock_release_recursive>
 80032aa:	bf00      	nop
 80032ac:	20000228 	.word	0x20000228

080032b0 <__sfputc_r>:
 80032b0:	6893      	ldr	r3, [r2, #8]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	b410      	push	{r4}
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	da08      	bge.n	80032ce <__sfputc_r+0x1e>
 80032bc:	6994      	ldr	r4, [r2, #24]
 80032be:	42a3      	cmp	r3, r4
 80032c0:	db01      	blt.n	80032c6 <__sfputc_r+0x16>
 80032c2:	290a      	cmp	r1, #10
 80032c4:	d103      	bne.n	80032ce <__sfputc_r+0x1e>
 80032c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ca:	f7ff bde8 	b.w	8002e9e <__swbuf_r>
 80032ce:	6813      	ldr	r3, [r2, #0]
 80032d0:	1c58      	adds	r0, r3, #1
 80032d2:	6010      	str	r0, [r2, #0]
 80032d4:	7019      	strb	r1, [r3, #0]
 80032d6:	4608      	mov	r0, r1
 80032d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032dc:	4770      	bx	lr

080032de <__sfputs_r>:
 80032de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e0:	4606      	mov	r6, r0
 80032e2:	460f      	mov	r7, r1
 80032e4:	4614      	mov	r4, r2
 80032e6:	18d5      	adds	r5, r2, r3
 80032e8:	42ac      	cmp	r4, r5
 80032ea:	d101      	bne.n	80032f0 <__sfputs_r+0x12>
 80032ec:	2000      	movs	r0, #0
 80032ee:	e007      	b.n	8003300 <__sfputs_r+0x22>
 80032f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f4:	463a      	mov	r2, r7
 80032f6:	4630      	mov	r0, r6
 80032f8:	f7ff ffda 	bl	80032b0 <__sfputc_r>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	d1f3      	bne.n	80032e8 <__sfputs_r+0xa>
 8003300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003304 <_vfiprintf_r>:
 8003304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003308:	460d      	mov	r5, r1
 800330a:	b09d      	sub	sp, #116	; 0x74
 800330c:	4614      	mov	r4, r2
 800330e:	4698      	mov	r8, r3
 8003310:	4606      	mov	r6, r0
 8003312:	b118      	cbz	r0, 800331c <_vfiprintf_r+0x18>
 8003314:	6a03      	ldr	r3, [r0, #32]
 8003316:	b90b      	cbnz	r3, 800331c <_vfiprintf_r+0x18>
 8003318:	f7ff fcda 	bl	8002cd0 <__sinit>
 800331c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800331e:	07d9      	lsls	r1, r3, #31
 8003320:	d405      	bmi.n	800332e <_vfiprintf_r+0x2a>
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	059a      	lsls	r2, r3, #22
 8003326:	d402      	bmi.n	800332e <_vfiprintf_r+0x2a>
 8003328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800332a:	f7ff fec6 	bl	80030ba <__retarget_lock_acquire_recursive>
 800332e:	89ab      	ldrh	r3, [r5, #12]
 8003330:	071b      	lsls	r3, r3, #28
 8003332:	d501      	bpl.n	8003338 <_vfiprintf_r+0x34>
 8003334:	692b      	ldr	r3, [r5, #16]
 8003336:	b99b      	cbnz	r3, 8003360 <_vfiprintf_r+0x5c>
 8003338:	4629      	mov	r1, r5
 800333a:	4630      	mov	r0, r6
 800333c:	f7ff fdec 	bl	8002f18 <__swsetup_r>
 8003340:	b170      	cbz	r0, 8003360 <_vfiprintf_r+0x5c>
 8003342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003344:	07dc      	lsls	r4, r3, #31
 8003346:	d504      	bpl.n	8003352 <_vfiprintf_r+0x4e>
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	b01d      	add	sp, #116	; 0x74
 800334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003352:	89ab      	ldrh	r3, [r5, #12]
 8003354:	0598      	lsls	r0, r3, #22
 8003356:	d4f7      	bmi.n	8003348 <_vfiprintf_r+0x44>
 8003358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800335a:	f7ff feaf 	bl	80030bc <__retarget_lock_release_recursive>
 800335e:	e7f3      	b.n	8003348 <_vfiprintf_r+0x44>
 8003360:	2300      	movs	r3, #0
 8003362:	9309      	str	r3, [sp, #36]	; 0x24
 8003364:	2320      	movs	r3, #32
 8003366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800336a:	f8cd 800c 	str.w	r8, [sp, #12]
 800336e:	2330      	movs	r3, #48	; 0x30
 8003370:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003524 <_vfiprintf_r+0x220>
 8003374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003378:	f04f 0901 	mov.w	r9, #1
 800337c:	4623      	mov	r3, r4
 800337e:	469a      	mov	sl, r3
 8003380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003384:	b10a      	cbz	r2, 800338a <_vfiprintf_r+0x86>
 8003386:	2a25      	cmp	r2, #37	; 0x25
 8003388:	d1f9      	bne.n	800337e <_vfiprintf_r+0x7a>
 800338a:	ebba 0b04 	subs.w	fp, sl, r4
 800338e:	d00b      	beq.n	80033a8 <_vfiprintf_r+0xa4>
 8003390:	465b      	mov	r3, fp
 8003392:	4622      	mov	r2, r4
 8003394:	4629      	mov	r1, r5
 8003396:	4630      	mov	r0, r6
 8003398:	f7ff ffa1 	bl	80032de <__sfputs_r>
 800339c:	3001      	adds	r0, #1
 800339e:	f000 80a9 	beq.w	80034f4 <_vfiprintf_r+0x1f0>
 80033a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033a4:	445a      	add	r2, fp
 80033a6:	9209      	str	r2, [sp, #36]	; 0x24
 80033a8:	f89a 3000 	ldrb.w	r3, [sl]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80a1 	beq.w	80034f4 <_vfiprintf_r+0x1f0>
 80033b2:	2300      	movs	r3, #0
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033bc:	f10a 0a01 	add.w	sl, sl, #1
 80033c0:	9304      	str	r3, [sp, #16]
 80033c2:	9307      	str	r3, [sp, #28]
 80033c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c8:	931a      	str	r3, [sp, #104]	; 0x68
 80033ca:	4654      	mov	r4, sl
 80033cc:	2205      	movs	r2, #5
 80033ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d2:	4854      	ldr	r0, [pc, #336]	; (8003524 <_vfiprintf_r+0x220>)
 80033d4:	f7fc ff04 	bl	80001e0 <memchr>
 80033d8:	9a04      	ldr	r2, [sp, #16]
 80033da:	b9d8      	cbnz	r0, 8003414 <_vfiprintf_r+0x110>
 80033dc:	06d1      	lsls	r1, r2, #27
 80033de:	bf44      	itt	mi
 80033e0:	2320      	movmi	r3, #32
 80033e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e6:	0713      	lsls	r3, r2, #28
 80033e8:	bf44      	itt	mi
 80033ea:	232b      	movmi	r3, #43	; 0x2b
 80033ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033f0:	f89a 3000 	ldrb.w	r3, [sl]
 80033f4:	2b2a      	cmp	r3, #42	; 0x2a
 80033f6:	d015      	beq.n	8003424 <_vfiprintf_r+0x120>
 80033f8:	9a07      	ldr	r2, [sp, #28]
 80033fa:	4654      	mov	r4, sl
 80033fc:	2000      	movs	r0, #0
 80033fe:	f04f 0c0a 	mov.w	ip, #10
 8003402:	4621      	mov	r1, r4
 8003404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003408:	3b30      	subs	r3, #48	; 0x30
 800340a:	2b09      	cmp	r3, #9
 800340c:	d94d      	bls.n	80034aa <_vfiprintf_r+0x1a6>
 800340e:	b1b0      	cbz	r0, 800343e <_vfiprintf_r+0x13a>
 8003410:	9207      	str	r2, [sp, #28]
 8003412:	e014      	b.n	800343e <_vfiprintf_r+0x13a>
 8003414:	eba0 0308 	sub.w	r3, r0, r8
 8003418:	fa09 f303 	lsl.w	r3, r9, r3
 800341c:	4313      	orrs	r3, r2
 800341e:	9304      	str	r3, [sp, #16]
 8003420:	46a2      	mov	sl, r4
 8003422:	e7d2      	b.n	80033ca <_vfiprintf_r+0xc6>
 8003424:	9b03      	ldr	r3, [sp, #12]
 8003426:	1d19      	adds	r1, r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	9103      	str	r1, [sp, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	bfbb      	ittet	lt
 8003430:	425b      	neglt	r3, r3
 8003432:	f042 0202 	orrlt.w	r2, r2, #2
 8003436:	9307      	strge	r3, [sp, #28]
 8003438:	9307      	strlt	r3, [sp, #28]
 800343a:	bfb8      	it	lt
 800343c:	9204      	strlt	r2, [sp, #16]
 800343e:	7823      	ldrb	r3, [r4, #0]
 8003440:	2b2e      	cmp	r3, #46	; 0x2e
 8003442:	d10c      	bne.n	800345e <_vfiprintf_r+0x15a>
 8003444:	7863      	ldrb	r3, [r4, #1]
 8003446:	2b2a      	cmp	r3, #42	; 0x2a
 8003448:	d134      	bne.n	80034b4 <_vfiprintf_r+0x1b0>
 800344a:	9b03      	ldr	r3, [sp, #12]
 800344c:	1d1a      	adds	r2, r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	9203      	str	r2, [sp, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfb8      	it	lt
 8003456:	f04f 33ff 	movlt.w	r3, #4294967295
 800345a:	3402      	adds	r4, #2
 800345c:	9305      	str	r3, [sp, #20]
 800345e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003534 <_vfiprintf_r+0x230>
 8003462:	7821      	ldrb	r1, [r4, #0]
 8003464:	2203      	movs	r2, #3
 8003466:	4650      	mov	r0, sl
 8003468:	f7fc feba 	bl	80001e0 <memchr>
 800346c:	b138      	cbz	r0, 800347e <_vfiprintf_r+0x17a>
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	eba0 000a 	sub.w	r0, r0, sl
 8003474:	2240      	movs	r2, #64	; 0x40
 8003476:	4082      	lsls	r2, r0
 8003478:	4313      	orrs	r3, r2
 800347a:	3401      	adds	r4, #1
 800347c:	9304      	str	r3, [sp, #16]
 800347e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003482:	4829      	ldr	r0, [pc, #164]	; (8003528 <_vfiprintf_r+0x224>)
 8003484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003488:	2206      	movs	r2, #6
 800348a:	f7fc fea9 	bl	80001e0 <memchr>
 800348e:	2800      	cmp	r0, #0
 8003490:	d03f      	beq.n	8003512 <_vfiprintf_r+0x20e>
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <_vfiprintf_r+0x228>)
 8003494:	bb1b      	cbnz	r3, 80034de <_vfiprintf_r+0x1da>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	3307      	adds	r3, #7
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	3308      	adds	r3, #8
 80034a0:	9303      	str	r3, [sp, #12]
 80034a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a4:	443b      	add	r3, r7
 80034a6:	9309      	str	r3, [sp, #36]	; 0x24
 80034a8:	e768      	b.n	800337c <_vfiprintf_r+0x78>
 80034aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ae:	460c      	mov	r4, r1
 80034b0:	2001      	movs	r0, #1
 80034b2:	e7a6      	b.n	8003402 <_vfiprintf_r+0xfe>
 80034b4:	2300      	movs	r3, #0
 80034b6:	3401      	adds	r4, #1
 80034b8:	9305      	str	r3, [sp, #20]
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 0c0a 	mov.w	ip, #10
 80034c0:	4620      	mov	r0, r4
 80034c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c6:	3a30      	subs	r2, #48	; 0x30
 80034c8:	2a09      	cmp	r2, #9
 80034ca:	d903      	bls.n	80034d4 <_vfiprintf_r+0x1d0>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0c6      	beq.n	800345e <_vfiprintf_r+0x15a>
 80034d0:	9105      	str	r1, [sp, #20]
 80034d2:	e7c4      	b.n	800345e <_vfiprintf_r+0x15a>
 80034d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d8:	4604      	mov	r4, r0
 80034da:	2301      	movs	r3, #1
 80034dc:	e7f0      	b.n	80034c0 <_vfiprintf_r+0x1bc>
 80034de:	ab03      	add	r3, sp, #12
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	462a      	mov	r2, r5
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <_vfiprintf_r+0x22c>)
 80034e6:	a904      	add	r1, sp, #16
 80034e8:	4630      	mov	r0, r6
 80034ea:	f3af 8000 	nop.w
 80034ee:	4607      	mov	r7, r0
 80034f0:	1c78      	adds	r0, r7, #1
 80034f2:	d1d6      	bne.n	80034a2 <_vfiprintf_r+0x19e>
 80034f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034f6:	07d9      	lsls	r1, r3, #31
 80034f8:	d405      	bmi.n	8003506 <_vfiprintf_r+0x202>
 80034fa:	89ab      	ldrh	r3, [r5, #12]
 80034fc:	059a      	lsls	r2, r3, #22
 80034fe:	d402      	bmi.n	8003506 <_vfiprintf_r+0x202>
 8003500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003502:	f7ff fddb 	bl	80030bc <__retarget_lock_release_recursive>
 8003506:	89ab      	ldrh	r3, [r5, #12]
 8003508:	065b      	lsls	r3, r3, #25
 800350a:	f53f af1d 	bmi.w	8003348 <_vfiprintf_r+0x44>
 800350e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003510:	e71c      	b.n	800334c <_vfiprintf_r+0x48>
 8003512:	ab03      	add	r3, sp, #12
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	462a      	mov	r2, r5
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <_vfiprintf_r+0x22c>)
 800351a:	a904      	add	r1, sp, #16
 800351c:	4630      	mov	r0, r6
 800351e:	f000 f879 	bl	8003614 <_printf_i>
 8003522:	e7e4      	b.n	80034ee <_vfiprintf_r+0x1ea>
 8003524:	08003b28 	.word	0x08003b28
 8003528:	08003b32 	.word	0x08003b32
 800352c:	00000000 	.word	0x00000000
 8003530:	080032df 	.word	0x080032df
 8003534:	08003b2e 	.word	0x08003b2e

08003538 <_printf_common>:
 8003538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	4616      	mov	r6, r2
 800353e:	4699      	mov	r9, r3
 8003540:	688a      	ldr	r2, [r1, #8]
 8003542:	690b      	ldr	r3, [r1, #16]
 8003544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003548:	4293      	cmp	r3, r2
 800354a:	bfb8      	it	lt
 800354c:	4613      	movlt	r3, r2
 800354e:	6033      	str	r3, [r6, #0]
 8003550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003554:	4607      	mov	r7, r0
 8003556:	460c      	mov	r4, r1
 8003558:	b10a      	cbz	r2, 800355e <_printf_common+0x26>
 800355a:	3301      	adds	r3, #1
 800355c:	6033      	str	r3, [r6, #0]
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	0699      	lsls	r1, r3, #26
 8003562:	bf42      	ittt	mi
 8003564:	6833      	ldrmi	r3, [r6, #0]
 8003566:	3302      	addmi	r3, #2
 8003568:	6033      	strmi	r3, [r6, #0]
 800356a:	6825      	ldr	r5, [r4, #0]
 800356c:	f015 0506 	ands.w	r5, r5, #6
 8003570:	d106      	bne.n	8003580 <_printf_common+0x48>
 8003572:	f104 0a19 	add.w	sl, r4, #25
 8003576:	68e3      	ldr	r3, [r4, #12]
 8003578:	6832      	ldr	r2, [r6, #0]
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	42ab      	cmp	r3, r5
 800357e:	dc26      	bgt.n	80035ce <_printf_common+0x96>
 8003580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003584:	1e13      	subs	r3, r2, #0
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	bf18      	it	ne
 800358a:	2301      	movne	r3, #1
 800358c:	0692      	lsls	r2, r2, #26
 800358e:	d42b      	bmi.n	80035e8 <_printf_common+0xb0>
 8003590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003594:	4649      	mov	r1, r9
 8003596:	4638      	mov	r0, r7
 8003598:	47c0      	blx	r8
 800359a:	3001      	adds	r0, #1
 800359c:	d01e      	beq.n	80035dc <_printf_common+0xa4>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	6922      	ldr	r2, [r4, #16]
 80035a2:	f003 0306 	and.w	r3, r3, #6
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf02      	ittt	eq
 80035aa:	68e5      	ldreq	r5, [r4, #12]
 80035ac:	6833      	ldreq	r3, [r6, #0]
 80035ae:	1aed      	subeq	r5, r5, r3
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	bf0c      	ite	eq
 80035b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b8:	2500      	movne	r5, #0
 80035ba:	4293      	cmp	r3, r2
 80035bc:	bfc4      	itt	gt
 80035be:	1a9b      	subgt	r3, r3, r2
 80035c0:	18ed      	addgt	r5, r5, r3
 80035c2:	2600      	movs	r6, #0
 80035c4:	341a      	adds	r4, #26
 80035c6:	42b5      	cmp	r5, r6
 80035c8:	d11a      	bne.n	8003600 <_printf_common+0xc8>
 80035ca:	2000      	movs	r0, #0
 80035cc:	e008      	b.n	80035e0 <_printf_common+0xa8>
 80035ce:	2301      	movs	r3, #1
 80035d0:	4652      	mov	r2, sl
 80035d2:	4649      	mov	r1, r9
 80035d4:	4638      	mov	r0, r7
 80035d6:	47c0      	blx	r8
 80035d8:	3001      	adds	r0, #1
 80035da:	d103      	bne.n	80035e4 <_printf_common+0xac>
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e4:	3501      	adds	r5, #1
 80035e6:	e7c6      	b.n	8003576 <_printf_common+0x3e>
 80035e8:	18e1      	adds	r1, r4, r3
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	2030      	movs	r0, #48	; 0x30
 80035ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035f2:	4422      	add	r2, r4
 80035f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035fc:	3302      	adds	r3, #2
 80035fe:	e7c7      	b.n	8003590 <_printf_common+0x58>
 8003600:	2301      	movs	r3, #1
 8003602:	4622      	mov	r2, r4
 8003604:	4649      	mov	r1, r9
 8003606:	4638      	mov	r0, r7
 8003608:	47c0      	blx	r8
 800360a:	3001      	adds	r0, #1
 800360c:	d0e6      	beq.n	80035dc <_printf_common+0xa4>
 800360e:	3601      	adds	r6, #1
 8003610:	e7d9      	b.n	80035c6 <_printf_common+0x8e>
	...

08003614 <_printf_i>:
 8003614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	7e0f      	ldrb	r7, [r1, #24]
 800361a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800361c:	2f78      	cmp	r7, #120	; 0x78
 800361e:	4691      	mov	r9, r2
 8003620:	4680      	mov	r8, r0
 8003622:	460c      	mov	r4, r1
 8003624:	469a      	mov	sl, r3
 8003626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800362a:	d807      	bhi.n	800363c <_printf_i+0x28>
 800362c:	2f62      	cmp	r7, #98	; 0x62
 800362e:	d80a      	bhi.n	8003646 <_printf_i+0x32>
 8003630:	2f00      	cmp	r7, #0
 8003632:	f000 80d4 	beq.w	80037de <_printf_i+0x1ca>
 8003636:	2f58      	cmp	r7, #88	; 0x58
 8003638:	f000 80c0 	beq.w	80037bc <_printf_i+0x1a8>
 800363c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003644:	e03a      	b.n	80036bc <_printf_i+0xa8>
 8003646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800364a:	2b15      	cmp	r3, #21
 800364c:	d8f6      	bhi.n	800363c <_printf_i+0x28>
 800364e:	a101      	add	r1, pc, #4	; (adr r1, 8003654 <_printf_i+0x40>)
 8003650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003654:	080036ad 	.word	0x080036ad
 8003658:	080036c1 	.word	0x080036c1
 800365c:	0800363d 	.word	0x0800363d
 8003660:	0800363d 	.word	0x0800363d
 8003664:	0800363d 	.word	0x0800363d
 8003668:	0800363d 	.word	0x0800363d
 800366c:	080036c1 	.word	0x080036c1
 8003670:	0800363d 	.word	0x0800363d
 8003674:	0800363d 	.word	0x0800363d
 8003678:	0800363d 	.word	0x0800363d
 800367c:	0800363d 	.word	0x0800363d
 8003680:	080037c5 	.word	0x080037c5
 8003684:	080036ed 	.word	0x080036ed
 8003688:	0800377f 	.word	0x0800377f
 800368c:	0800363d 	.word	0x0800363d
 8003690:	0800363d 	.word	0x0800363d
 8003694:	080037e7 	.word	0x080037e7
 8003698:	0800363d 	.word	0x0800363d
 800369c:	080036ed 	.word	0x080036ed
 80036a0:	0800363d 	.word	0x0800363d
 80036a4:	0800363d 	.word	0x0800363d
 80036a8:	08003787 	.word	0x08003787
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	602a      	str	r2, [r5, #0]
 80036b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036bc:	2301      	movs	r3, #1
 80036be:	e09f      	b.n	8003800 <_printf_i+0x1ec>
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	0607      	lsls	r7, r0, #24
 80036c6:	f103 0104 	add.w	r1, r3, #4
 80036ca:	6029      	str	r1, [r5, #0]
 80036cc:	d501      	bpl.n	80036d2 <_printf_i+0xbe>
 80036ce:	681e      	ldr	r6, [r3, #0]
 80036d0:	e003      	b.n	80036da <_printf_i+0xc6>
 80036d2:	0646      	lsls	r6, r0, #25
 80036d4:	d5fb      	bpl.n	80036ce <_printf_i+0xba>
 80036d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036da:	2e00      	cmp	r6, #0
 80036dc:	da03      	bge.n	80036e6 <_printf_i+0xd2>
 80036de:	232d      	movs	r3, #45	; 0x2d
 80036e0:	4276      	negs	r6, r6
 80036e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036e6:	485a      	ldr	r0, [pc, #360]	; (8003850 <_printf_i+0x23c>)
 80036e8:	230a      	movs	r3, #10
 80036ea:	e012      	b.n	8003712 <_printf_i+0xfe>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	1d19      	adds	r1, r3, #4
 80036f2:	6029      	str	r1, [r5, #0]
 80036f4:	0605      	lsls	r5, r0, #24
 80036f6:	d501      	bpl.n	80036fc <_printf_i+0xe8>
 80036f8:	681e      	ldr	r6, [r3, #0]
 80036fa:	e002      	b.n	8003702 <_printf_i+0xee>
 80036fc:	0641      	lsls	r1, r0, #25
 80036fe:	d5fb      	bpl.n	80036f8 <_printf_i+0xe4>
 8003700:	881e      	ldrh	r6, [r3, #0]
 8003702:	4853      	ldr	r0, [pc, #332]	; (8003850 <_printf_i+0x23c>)
 8003704:	2f6f      	cmp	r7, #111	; 0x6f
 8003706:	bf0c      	ite	eq
 8003708:	2308      	moveq	r3, #8
 800370a:	230a      	movne	r3, #10
 800370c:	2100      	movs	r1, #0
 800370e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003712:	6865      	ldr	r5, [r4, #4]
 8003714:	60a5      	str	r5, [r4, #8]
 8003716:	2d00      	cmp	r5, #0
 8003718:	bfa2      	ittt	ge
 800371a:	6821      	ldrge	r1, [r4, #0]
 800371c:	f021 0104 	bicge.w	r1, r1, #4
 8003720:	6021      	strge	r1, [r4, #0]
 8003722:	b90e      	cbnz	r6, 8003728 <_printf_i+0x114>
 8003724:	2d00      	cmp	r5, #0
 8003726:	d04b      	beq.n	80037c0 <_printf_i+0x1ac>
 8003728:	4615      	mov	r5, r2
 800372a:	fbb6 f1f3 	udiv	r1, r6, r3
 800372e:	fb03 6711 	mls	r7, r3, r1, r6
 8003732:	5dc7      	ldrb	r7, [r0, r7]
 8003734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003738:	4637      	mov	r7, r6
 800373a:	42bb      	cmp	r3, r7
 800373c:	460e      	mov	r6, r1
 800373e:	d9f4      	bls.n	800372a <_printf_i+0x116>
 8003740:	2b08      	cmp	r3, #8
 8003742:	d10b      	bne.n	800375c <_printf_i+0x148>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	07de      	lsls	r6, r3, #31
 8003748:	d508      	bpl.n	800375c <_printf_i+0x148>
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	6861      	ldr	r1, [r4, #4]
 800374e:	4299      	cmp	r1, r3
 8003750:	bfde      	ittt	le
 8003752:	2330      	movle	r3, #48	; 0x30
 8003754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800375c:	1b52      	subs	r2, r2, r5
 800375e:	6122      	str	r2, [r4, #16]
 8003760:	f8cd a000 	str.w	sl, [sp]
 8003764:	464b      	mov	r3, r9
 8003766:	aa03      	add	r2, sp, #12
 8003768:	4621      	mov	r1, r4
 800376a:	4640      	mov	r0, r8
 800376c:	f7ff fee4 	bl	8003538 <_printf_common>
 8003770:	3001      	adds	r0, #1
 8003772:	d14a      	bne.n	800380a <_printf_i+0x1f6>
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	b004      	add	sp, #16
 800377a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	f043 0320 	orr.w	r3, r3, #32
 8003784:	6023      	str	r3, [r4, #0]
 8003786:	4833      	ldr	r0, [pc, #204]	; (8003854 <_printf_i+0x240>)
 8003788:	2778      	movs	r7, #120	; 0x78
 800378a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	6829      	ldr	r1, [r5, #0]
 8003792:	061f      	lsls	r7, r3, #24
 8003794:	f851 6b04 	ldr.w	r6, [r1], #4
 8003798:	d402      	bmi.n	80037a0 <_printf_i+0x18c>
 800379a:	065f      	lsls	r7, r3, #25
 800379c:	bf48      	it	mi
 800379e:	b2b6      	uxthmi	r6, r6
 80037a0:	07df      	lsls	r7, r3, #31
 80037a2:	bf48      	it	mi
 80037a4:	f043 0320 	orrmi.w	r3, r3, #32
 80037a8:	6029      	str	r1, [r5, #0]
 80037aa:	bf48      	it	mi
 80037ac:	6023      	strmi	r3, [r4, #0]
 80037ae:	b91e      	cbnz	r6, 80037b8 <_printf_i+0x1a4>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	f023 0320 	bic.w	r3, r3, #32
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	2310      	movs	r3, #16
 80037ba:	e7a7      	b.n	800370c <_printf_i+0xf8>
 80037bc:	4824      	ldr	r0, [pc, #144]	; (8003850 <_printf_i+0x23c>)
 80037be:	e7e4      	b.n	800378a <_printf_i+0x176>
 80037c0:	4615      	mov	r5, r2
 80037c2:	e7bd      	b.n	8003740 <_printf_i+0x12c>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	6826      	ldr	r6, [r4, #0]
 80037c8:	6961      	ldr	r1, [r4, #20]
 80037ca:	1d18      	adds	r0, r3, #4
 80037cc:	6028      	str	r0, [r5, #0]
 80037ce:	0635      	lsls	r5, r6, #24
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	d501      	bpl.n	80037d8 <_printf_i+0x1c4>
 80037d4:	6019      	str	r1, [r3, #0]
 80037d6:	e002      	b.n	80037de <_printf_i+0x1ca>
 80037d8:	0670      	lsls	r0, r6, #25
 80037da:	d5fb      	bpl.n	80037d4 <_printf_i+0x1c0>
 80037dc:	8019      	strh	r1, [r3, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	6123      	str	r3, [r4, #16]
 80037e2:	4615      	mov	r5, r2
 80037e4:	e7bc      	b.n	8003760 <_printf_i+0x14c>
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	1d1a      	adds	r2, r3, #4
 80037ea:	602a      	str	r2, [r5, #0]
 80037ec:	681d      	ldr	r5, [r3, #0]
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	2100      	movs	r1, #0
 80037f2:	4628      	mov	r0, r5
 80037f4:	f7fc fcf4 	bl	80001e0 <memchr>
 80037f8:	b108      	cbz	r0, 80037fe <_printf_i+0x1ea>
 80037fa:	1b40      	subs	r0, r0, r5
 80037fc:	6060      	str	r0, [r4, #4]
 80037fe:	6863      	ldr	r3, [r4, #4]
 8003800:	6123      	str	r3, [r4, #16]
 8003802:	2300      	movs	r3, #0
 8003804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003808:	e7aa      	b.n	8003760 <_printf_i+0x14c>
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	462a      	mov	r2, r5
 800380e:	4649      	mov	r1, r9
 8003810:	4640      	mov	r0, r8
 8003812:	47d0      	blx	sl
 8003814:	3001      	adds	r0, #1
 8003816:	d0ad      	beq.n	8003774 <_printf_i+0x160>
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	079b      	lsls	r3, r3, #30
 800381c:	d413      	bmi.n	8003846 <_printf_i+0x232>
 800381e:	68e0      	ldr	r0, [r4, #12]
 8003820:	9b03      	ldr	r3, [sp, #12]
 8003822:	4298      	cmp	r0, r3
 8003824:	bfb8      	it	lt
 8003826:	4618      	movlt	r0, r3
 8003828:	e7a6      	b.n	8003778 <_printf_i+0x164>
 800382a:	2301      	movs	r3, #1
 800382c:	4632      	mov	r2, r6
 800382e:	4649      	mov	r1, r9
 8003830:	4640      	mov	r0, r8
 8003832:	47d0      	blx	sl
 8003834:	3001      	adds	r0, #1
 8003836:	d09d      	beq.n	8003774 <_printf_i+0x160>
 8003838:	3501      	adds	r5, #1
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	9903      	ldr	r1, [sp, #12]
 800383e:	1a5b      	subs	r3, r3, r1
 8003840:	42ab      	cmp	r3, r5
 8003842:	dcf2      	bgt.n	800382a <_printf_i+0x216>
 8003844:	e7eb      	b.n	800381e <_printf_i+0x20a>
 8003846:	2500      	movs	r5, #0
 8003848:	f104 0619 	add.w	r6, r4, #25
 800384c:	e7f5      	b.n	800383a <_printf_i+0x226>
 800384e:	bf00      	nop
 8003850:	08003b39 	.word	0x08003b39
 8003854:	08003b4a 	.word	0x08003b4a

08003858 <__sflush_r>:
 8003858:	898a      	ldrh	r2, [r1, #12]
 800385a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385e:	4605      	mov	r5, r0
 8003860:	0710      	lsls	r0, r2, #28
 8003862:	460c      	mov	r4, r1
 8003864:	d458      	bmi.n	8003918 <__sflush_r+0xc0>
 8003866:	684b      	ldr	r3, [r1, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	dc05      	bgt.n	8003878 <__sflush_r+0x20>
 800386c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	dc02      	bgt.n	8003878 <__sflush_r+0x20>
 8003872:	2000      	movs	r0, #0
 8003874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800387a:	2e00      	cmp	r6, #0
 800387c:	d0f9      	beq.n	8003872 <__sflush_r+0x1a>
 800387e:	2300      	movs	r3, #0
 8003880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003884:	682f      	ldr	r7, [r5, #0]
 8003886:	6a21      	ldr	r1, [r4, #32]
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	d032      	beq.n	80038f2 <__sflush_r+0x9a>
 800388c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	075a      	lsls	r2, r3, #29
 8003892:	d505      	bpl.n	80038a0 <__sflush_r+0x48>
 8003894:	6863      	ldr	r3, [r4, #4]
 8003896:	1ac0      	subs	r0, r0, r3
 8003898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800389a:	b10b      	cbz	r3, 80038a0 <__sflush_r+0x48>
 800389c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800389e:	1ac0      	subs	r0, r0, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	4602      	mov	r2, r0
 80038a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038a6:	6a21      	ldr	r1, [r4, #32]
 80038a8:	4628      	mov	r0, r5
 80038aa:	47b0      	blx	r6
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	d106      	bne.n	80038c0 <__sflush_r+0x68>
 80038b2:	6829      	ldr	r1, [r5, #0]
 80038b4:	291d      	cmp	r1, #29
 80038b6:	d82b      	bhi.n	8003910 <__sflush_r+0xb8>
 80038b8:	4a29      	ldr	r2, [pc, #164]	; (8003960 <__sflush_r+0x108>)
 80038ba:	410a      	asrs	r2, r1
 80038bc:	07d6      	lsls	r6, r2, #31
 80038be:	d427      	bmi.n	8003910 <__sflush_r+0xb8>
 80038c0:	2200      	movs	r2, #0
 80038c2:	6062      	str	r2, [r4, #4]
 80038c4:	04d9      	lsls	r1, r3, #19
 80038c6:	6922      	ldr	r2, [r4, #16]
 80038c8:	6022      	str	r2, [r4, #0]
 80038ca:	d504      	bpl.n	80038d6 <__sflush_r+0x7e>
 80038cc:	1c42      	adds	r2, r0, #1
 80038ce:	d101      	bne.n	80038d4 <__sflush_r+0x7c>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	b903      	cbnz	r3, 80038d6 <__sflush_r+0x7e>
 80038d4:	6560      	str	r0, [r4, #84]	; 0x54
 80038d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038d8:	602f      	str	r7, [r5, #0]
 80038da:	2900      	cmp	r1, #0
 80038dc:	d0c9      	beq.n	8003872 <__sflush_r+0x1a>
 80038de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038e2:	4299      	cmp	r1, r3
 80038e4:	d002      	beq.n	80038ec <__sflush_r+0x94>
 80038e6:	4628      	mov	r0, r5
 80038e8:	f7ff fbea 	bl	80030c0 <_free_r>
 80038ec:	2000      	movs	r0, #0
 80038ee:	6360      	str	r0, [r4, #52]	; 0x34
 80038f0:	e7c0      	b.n	8003874 <__sflush_r+0x1c>
 80038f2:	2301      	movs	r3, #1
 80038f4:	4628      	mov	r0, r5
 80038f6:	47b0      	blx	r6
 80038f8:	1c41      	adds	r1, r0, #1
 80038fa:	d1c8      	bne.n	800388e <__sflush_r+0x36>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0c5      	beq.n	800388e <__sflush_r+0x36>
 8003902:	2b1d      	cmp	r3, #29
 8003904:	d001      	beq.n	800390a <__sflush_r+0xb2>
 8003906:	2b16      	cmp	r3, #22
 8003908:	d101      	bne.n	800390e <__sflush_r+0xb6>
 800390a:	602f      	str	r7, [r5, #0]
 800390c:	e7b1      	b.n	8003872 <__sflush_r+0x1a>
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	e7ad      	b.n	8003874 <__sflush_r+0x1c>
 8003918:	690f      	ldr	r7, [r1, #16]
 800391a:	2f00      	cmp	r7, #0
 800391c:	d0a9      	beq.n	8003872 <__sflush_r+0x1a>
 800391e:	0793      	lsls	r3, r2, #30
 8003920:	680e      	ldr	r6, [r1, #0]
 8003922:	bf08      	it	eq
 8003924:	694b      	ldreq	r3, [r1, #20]
 8003926:	600f      	str	r7, [r1, #0]
 8003928:	bf18      	it	ne
 800392a:	2300      	movne	r3, #0
 800392c:	eba6 0807 	sub.w	r8, r6, r7
 8003930:	608b      	str	r3, [r1, #8]
 8003932:	f1b8 0f00 	cmp.w	r8, #0
 8003936:	dd9c      	ble.n	8003872 <__sflush_r+0x1a>
 8003938:	6a21      	ldr	r1, [r4, #32]
 800393a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800393c:	4643      	mov	r3, r8
 800393e:	463a      	mov	r2, r7
 8003940:	4628      	mov	r0, r5
 8003942:	47b0      	blx	r6
 8003944:	2800      	cmp	r0, #0
 8003946:	dc06      	bgt.n	8003956 <__sflush_r+0xfe>
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800394e:	81a3      	strh	r3, [r4, #12]
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	e78e      	b.n	8003874 <__sflush_r+0x1c>
 8003956:	4407      	add	r7, r0
 8003958:	eba8 0800 	sub.w	r8, r8, r0
 800395c:	e7e9      	b.n	8003932 <__sflush_r+0xda>
 800395e:	bf00      	nop
 8003960:	dfbffffe 	.word	0xdfbffffe

08003964 <_fflush_r>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	690b      	ldr	r3, [r1, #16]
 8003968:	4605      	mov	r5, r0
 800396a:	460c      	mov	r4, r1
 800396c:	b913      	cbnz	r3, 8003974 <_fflush_r+0x10>
 800396e:	2500      	movs	r5, #0
 8003970:	4628      	mov	r0, r5
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	b118      	cbz	r0, 800397e <_fflush_r+0x1a>
 8003976:	6a03      	ldr	r3, [r0, #32]
 8003978:	b90b      	cbnz	r3, 800397e <_fflush_r+0x1a>
 800397a:	f7ff f9a9 	bl	8002cd0 <__sinit>
 800397e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f3      	beq.n	800396e <_fflush_r+0xa>
 8003986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003988:	07d0      	lsls	r0, r2, #31
 800398a:	d404      	bmi.n	8003996 <_fflush_r+0x32>
 800398c:	0599      	lsls	r1, r3, #22
 800398e:	d402      	bmi.n	8003996 <_fflush_r+0x32>
 8003990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003992:	f7ff fb92 	bl	80030ba <__retarget_lock_acquire_recursive>
 8003996:	4628      	mov	r0, r5
 8003998:	4621      	mov	r1, r4
 800399a:	f7ff ff5d 	bl	8003858 <__sflush_r>
 800399e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039a0:	07da      	lsls	r2, r3, #31
 80039a2:	4605      	mov	r5, r0
 80039a4:	d4e4      	bmi.n	8003970 <_fflush_r+0xc>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	059b      	lsls	r3, r3, #22
 80039aa:	d4e1      	bmi.n	8003970 <_fflush_r+0xc>
 80039ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ae:	f7ff fb85 	bl	80030bc <__retarget_lock_release_recursive>
 80039b2:	e7dd      	b.n	8003970 <_fflush_r+0xc>

080039b4 <__swhatbuf_r>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	460c      	mov	r4, r1
 80039b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039bc:	2900      	cmp	r1, #0
 80039be:	b096      	sub	sp, #88	; 0x58
 80039c0:	4615      	mov	r5, r2
 80039c2:	461e      	mov	r6, r3
 80039c4:	da0d      	bge.n	80039e2 <__swhatbuf_r+0x2e>
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039cc:	f04f 0100 	mov.w	r1, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80039d6:	2340      	movne	r3, #64	; 0x40
 80039d8:	2000      	movs	r0, #0
 80039da:	6031      	str	r1, [r6, #0]
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	b016      	add	sp, #88	; 0x58
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	466a      	mov	r2, sp
 80039e4:	f000 f848 	bl	8003a78 <_fstat_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	dbec      	blt.n	80039c6 <__swhatbuf_r+0x12>
 80039ec:	9901      	ldr	r1, [sp, #4]
 80039ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80039f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80039f6:	4259      	negs	r1, r3
 80039f8:	4159      	adcs	r1, r3
 80039fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039fe:	e7eb      	b.n	80039d8 <__swhatbuf_r+0x24>

08003a00 <__smakebuf_r>:
 8003a00:	898b      	ldrh	r3, [r1, #12]
 8003a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a04:	079d      	lsls	r5, r3, #30
 8003a06:	4606      	mov	r6, r0
 8003a08:	460c      	mov	r4, r1
 8003a0a:	d507      	bpl.n	8003a1c <__smakebuf_r+0x1c>
 8003a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	6123      	str	r3, [r4, #16]
 8003a14:	2301      	movs	r3, #1
 8003a16:	6163      	str	r3, [r4, #20]
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	ab01      	add	r3, sp, #4
 8003a1e:	466a      	mov	r2, sp
 8003a20:	f7ff ffc8 	bl	80039b4 <__swhatbuf_r>
 8003a24:	9900      	ldr	r1, [sp, #0]
 8003a26:	4605      	mov	r5, r0
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f7ff fbb5 	bl	8003198 <_malloc_r>
 8003a2e:	b948      	cbnz	r0, 8003a44 <__smakebuf_r+0x44>
 8003a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a34:	059a      	lsls	r2, r3, #22
 8003a36:	d4ef      	bmi.n	8003a18 <__smakebuf_r+0x18>
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e7e3      	b.n	8003a0c <__smakebuf_r+0xc>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	6020      	str	r0, [r4, #0]
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	9b00      	ldr	r3, [sp, #0]
 8003a50:	6163      	str	r3, [r4, #20]
 8003a52:	9b01      	ldr	r3, [sp, #4]
 8003a54:	6120      	str	r0, [r4, #16]
 8003a56:	b15b      	cbz	r3, 8003a70 <__smakebuf_r+0x70>
 8003a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f000 f81d 	bl	8003a9c <_isatty_r>
 8003a62:	b128      	cbz	r0, 8003a70 <__smakebuf_r+0x70>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	431d      	orrs	r5, r3
 8003a74:	81a5      	strh	r5, [r4, #12]
 8003a76:	e7cf      	b.n	8003a18 <__smakebuf_r+0x18>

08003a78 <_fstat_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d07      	ldr	r5, [pc, #28]	; (8003a98 <_fstat_r+0x20>)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	4611      	mov	r1, r2
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	f7fc ffca 	bl	8000a1e <_fstat>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d102      	bne.n	8003a94 <_fstat_r+0x1c>
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	b103      	cbz	r3, 8003a94 <_fstat_r+0x1c>
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	bd38      	pop	{r3, r4, r5, pc}
 8003a96:	bf00      	nop
 8003a98:	20000224 	.word	0x20000224

08003a9c <_isatty_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4d06      	ldr	r5, [pc, #24]	; (8003ab8 <_isatty_r+0x1c>)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	602b      	str	r3, [r5, #0]
 8003aa8:	f7fc ffc9 	bl	8000a3e <_isatty>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d102      	bne.n	8003ab6 <_isatty_r+0x1a>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	b103      	cbz	r3, 8003ab6 <_isatty_r+0x1a>
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	20000224 	.word	0x20000224

08003abc <_sbrk_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d06      	ldr	r5, [pc, #24]	; (8003ad8 <_sbrk_r+0x1c>)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	f7fc ffd2 	bl	8000a70 <_sbrk>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_sbrk_r+0x1a>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_sbrk_r+0x1a>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	20000224 	.word	0x20000224

08003adc <_init>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	bf00      	nop
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr

08003ae8 <_fini>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr
